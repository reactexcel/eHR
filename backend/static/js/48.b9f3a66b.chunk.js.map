{"version":3,"sources":["../../../ReactReduxHR/src/modules/healthStats/component/AttendanceUploadSetting.jsx","../../../ReactReduxHR/src/modules/healthStats/component/PasswordResetSetting.jsx","../../../ReactReduxHR/src/modules/healthStats/container/Settings.jsx","../../../ReactReduxHR/src/components/generic/input/InputText.jsx"],"names":["AttendanceUploadSetting","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","defineProperty","target","name","value","handleAddClick","params","props","requestAddAttendanceUploadSetting","handleRemoveKey","requestDeleteAttendanceUploadSetting","state","userKey","dateTimeKey","attendanceUploadSetting","_this$state","isError","notify","message","isSuccess","_this2","config","data","userKeys","dateTimeKeys","user_id","map","keyText","i","push","react_default","a","createElement","key","className","onClick","field_name","key_text","time","userid_key","InputText","placeHolder","onchange","timing_key","React","Component","durationDays","options","label","PasswordResetSetting","toggleActive","selectedOption","onToggle","isDisabled","onSaveChangesClick","resetPasswordData","resetPasswordStatusData","_","status","parseInt","days","clearData","type","concat","disabled","lib_default","react_select_esm","onChange","placeholder","ContainerHealthStats","onIsAlreadyLogin","getAttendanceUploadSettings","resetPasswordStatus","Menu","id","role","Header","pageTitle","showLoading","frontend","show_loading","AttendanceUploadSetting_AttendanceUploadSetting","PasswordResetSetting_PasswordResetSetting","requestResetPasswordSetting","connect","toJS","loggedUser","logged_user","userLogin","settings","dispatch","actions","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_ref","ref","style","classname","required"],"mappings":"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","file":"static/js/48.b9f3a66b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport InputText from '../../../components/generic/input/InputText';\nimport {notify} from '../../../services/notify';\nimport moment from 'moment';\n\nexport default class AttendanceUploadSetting extends React.Component {\n    constructor() {\n        super();\n        this.state={\n            userKey: '',\n            dateTimeKey: ''\n        };\n    }\n    componentWillReceiveProps(props) {    \n        const {attendanceUploadSetting} = props;\n        const {userKey, dateTimeKey} = this.state;\n        if (attendanceUploadSetting.isError) {    \n            notify('Error !', attendanceUploadSetting.message, 'error');\n        }\n        if (attendanceUploadSetting.isSuccess && (userKey !== '' || dateTimeKey !== '')) {    \n            this.setState({\n                userKey: '',\n                dateTimeKey: ''\n            });\n        }\n    }\n    handleChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n    handleAddClick = (params) => {\n        this.props.requestAddAttendanceUploadSetting(params);\n    }\n    handleRemoveKey = (params) => {\n        this.props.requestDeleteAttendanceUploadSetting(params);\n    }\n    render() {\n        let config = this.props.attendanceUploadSetting.data;\n        let userKeys = [], dateTimeKeys = [];    \n        config.user_id && config.user_id.map((keyText, i)=>{\n            userKeys.push(<span key={i} className=\"key-chips\">\n            <span className=\"text\">{keyText}</span>\n            <span className=\"delete\" onClick={()=>{this.handleRemoveKey({field_name:'user_id', key_text: keyText})}} >x</span>\n        </span>)\n        })\n        config.time && config.time.map((keyText, i)=>{\n            dateTimeKeys.push(<span key={i} className=\"key-chips\">\n            <span className=\"text\">{keyText}</span>\n            <span className=\"delete\" onClick={()=>{this.handleRemoveKey({field_name:'time', key_text: keyText})}}>x</span>\n        </span>)\n        })\n        return (\n            <div className=\"attendance-upload-setting\">\n                <h5>Attendance Upload Setting</h5>\n                <table className=\"table table-responsive secret-key-table\">\n                    <thead>\n                        <tr>\n                            <th className=\"field-column\">Field</th>\n                            <th className=\"allowed-keys-column\">Allowed Keys</th>\n                            <th className=\"add-new-key-column\" >Add New Key</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    <tr>\n                        <td>User</td>\n                        <td><div className=\"keys-wrapper\">{userKeys}</div></td>\n                        <td>\n                            <div className=\"stats-add-icon-div\">\n                                <i className=\"material-icons stats-add-icon\" onClick={() => this.handleAddClick({userid_key:this.state.userKey})}>add_box</i>\n                            </div>\n                            <div className=\"app-name-input-div\">\n                                <InputText className=\"app-name-input\" name=\"userKey\" placeHolder=\"Date Time Key\" value={this.state.userKey} onchange={this.handleChange} />\n                            </div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>DateTime</td>\n                        <td><div className=\"keys-wrapper\">{dateTimeKeys}</div></td>\n                        <td>\n                            <div className=\"stats-add-icon-div\">\n                                <i className=\"material-icons stats-add-icon\" onClick={() => this.handleAddClick({timing_key: this.state.dateTimeKey})}>add_box</i>\n                            </div>\n                            <div className=\"app-name-input-div\">\n                                <InputText className=\"app-name-input\" name=\"dateTimeKey\" placeHolder=\"Date Time Key\" value={this.state.dateTimeKey} onchange={this.handleChange} />\n                            </div>\n                        </td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport ToggleButton from \"react-toggle-button\";\nimport * as _ from \"lodash\";\n\nconst durationDays = () => {\n  let options = [];\n  let i = 1;\n  while (i <= 100) {\n    options.push({ value: i, label: i + \" Days\" });\n    i++;\n  }\n  return options;\n};\n\nexport default class PasswordResetSetting extends Component {\n  state = { toggleActive: false, selectedOption: null };\n\n  onToggle = () => {\n    this.setState({ toggleActive: !this.state.toggleActive });\n  };\n\n  handleChange = selectedOption => {\n    this.setState({ selectedOption, isDisabled: \"\" });\n  };\n\n  onSaveChangesClick = () => {\n    this.props.resetPasswordData(this.state);\n  };\n  componentWillReceiveProps(props) {\n    const { value } = props.resetPasswordStatusData.data;\n    if (\n      !_.isEqual(\n        this.props.resetPasswordStatusData.data,\n        props.resetPasswordStatusData.data\n      )\n    ) {\n      this.setState({\n        toggleActive: value && value.status,\n        selectedOption: value\n          ? {\n              value: parseInt(value.days),\n              label: parseInt(value.days) + \" days\"\n            }\n          : null\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.clearData();\n  }\n  render() {\n    let isDisabled = this.state.selectedOption === null ? \"disabled\" : \"\";\n    return (\n      <div className=\"attendance-upload-setting\">\n        <div className=\"reset-password-save\">\n          <div className=\"col-sm-6 col-xs-6\">\n            <h5>Password Reset Setting</h5>\n          </div>\n          <div className=\"col-sm-6 col-xs-6 save-btn\">\n            <button\n              type=\"button\"\n              className={`btn btn-primary ${isDisabled}`}\n              onClick={this.onSaveChangesClick}\n              disabled={isDisabled}\n            >\n              Save Changes\n            </button>\n          </div>\n        </div>\n        <table className=\"table table-responsive secret-key-table\">\n          <tbody>\n            <tr>\n              <td>Reset Password</td>\n              <td>\n                <div className=\"app-name-input-div\">\n                  <ToggleButton\n                    value={this.state.toggleActive}\n                    onToggle={() => {\n                      this.onToggle();\n                    }}\n                  />{\" \"}\n                </div>\n              </td>\n            </tr>\n            <tr>\n              <td>Reset Password Duration</td>\n              <td>\n                <Select\n                  value={this.state.selectedOption}\n                  onChange={this.handleChange}\n                  options={durationDays()}\n                  placeholder=\"Select Duration\"\n                />\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Menu from \"../../../components/generic/Menu\";\nimport Header from \"../../../components/generic/Header\";\nimport { connect } from \"react-redux\";\nimport * as actions from '../../../redux/actions';\nimport AttendanceUploadSetting from \"../../../modules/healthStats/component/AttendanceUploadSetting\";\nimport PasswordResetSetting from \"../../../modules/healthStats/component/PasswordResetSetting\";\n\nclass ContainerHealthStats extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentWillMount() {\n    this.props.onIsAlreadyLogin();\n    this.props.getAttendanceUploadSettings();\n    this.props.resetPasswordStatus();\n  }\n  render() {\n    return (\n      <div>\n        <Menu {...this.props} />\n        <div\n          id=\"content\"\n          className=\"app-content box-shadow-z0 content-health-stats\"\n          role=\"main\"\n        >\n          <Header\n            pageTitle={\"Settings\"}\n            showLoading={this.props.frontend.show_loading}\n          />\n          <div className=\"app-body\" id=\"view\">\n            <div className=\"padding\">\n              <div className=\"row m-10\">\n                <div className=\"col-sm-6 setting-section1\">\n                  <div className=\"setting1 bg-white\">\n                    <AttendanceUploadSetting {...this.props} />\n                  </div>\n                </div>\n                <div className=\"col-sm-6 setting-section2\">\n                  <div className=\"setting2 bg-white\">\n                    <PasswordResetSetting\n                      resetPasswordData={this.props.requestResetPasswordSetting}\n                      resetPasswordStatusData={\n                        this.props.resetPasswordStatusData\n                      }\n                      clearData={this.props.clearData}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    frontend: state.frontend.toJS(),\n    loggedUser: state.logged_user.userLogin,\n    attendanceUploadSetting: state.settings.attendanceUploadSetting,\n    resetPasswordStatusData: state.settings.resetPasswordStatus\n  };\n};\nconst mapDispatchToProps = dispatch => ({\n  onIsAlreadyLogin: () => dispatch(actions.isAlreadyLogin()),\n  getAttendanceUploadSettings: () =>\n    dispatch(actions.requestGetAttendanceUploadSetting()),\n  requestAddAttendanceUploadSetting: params =>\n    dispatch(actions.requestAddAttendanceUploadSetting(params)),\n  requestDeleteAttendanceUploadSetting: params =>\n    dispatch(actions.requestDeleteAttendanceUploadSetting(params)),\n  requestResetPasswordSetting: params =>\n    dispatch(actions.requestResetPasswordSetting(params)),\n  resetPasswordStatus: () => dispatch(actions.requestResetPasswordStatus()),\n  clearData: () => dispatch(actions.requestClearResetPasswordData()),\n\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ContainerHealthStats);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst InputText = ({ className, ref, placeHolder, onchange, id, name, value, style }) => {\n  let classname = 'form-control ' + className;\n  return (\n    <input\n      type=\"text\"\n      className={classname}\n      ref={ref}\n      placeholder={placeHolder}\n      onChange={onchange}\n      id={id} required\n      name={name}\n      value={value}\n      style={style}\n    />\n  );\n};\n\nexport default InputText;\n\nInputText.propTypes = {\n  className: PropTypes.string,\n  placeHolder: PropTypes.string.isRequired,\n  onchange: PropTypes.func.isRequired,\n  id: PropTypes.number,\n  name: PropTypes.string,\n  value: PropTypes.string,\n  style: PropTypes.string\n};\n"],"sourceRoot":""}