{"ast":null,"code":"import _classCallCheck from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/var/www/html/ReactReduxHR/frontend/src/modules/manageRoles/containers/manageRoles.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { notify } from '../../../services/notify';\nimport Menu from '../../../components/generic/Menu';\nimport Header from '../../../components/generic/Header';\nimport { isNotUserValid } from '../../../services/generic';\nimport AlertNotification from '../../../components/generic/AlertNotification';\nimport AddRolesForm from '../../../modules/manageRoles/components/AddRolesForm';\nimport DisplayRolesLists from '../../../modules/manageRoles/components/DisplayRolesLists';\nimport UsersRolesList from '../../../components/generic/UsersRolesList';\nimport * as actions from '../../../redux/actions';\nimport * as actionsManageRoles from '../../../redux/manageRoles/actions/manageRoles';\n\nvar ManageRoles =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ManageRoles, _React$Component);\n\n  function ManageRoles(props) {\n    var _this;\n\n    _classCallCheck(this, ManageRoles);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ManageRoles).call(this, props));\n\n    _this.props.onIsAlreadyLogin();\n\n    _this.state = {\n      status_message: '',\n      rolesData: [],\n      updateRole: {\n        rolesId: '',\n        actionId: '',\n        pageId: '',\n        notificationId: ''\n      }\n    };\n    _this.callAddNewRole = _this.callAddNewRole.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChangeNotification = _this.handleChangeNotification.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onUserClick = _this.onUserClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ManageRoles, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.props.onRolesList();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      var loggedUser = props.loggedUser,\n          location = props.location,\n          history = props.history,\n          rolesData = props.manageRoles.rolesData;\n      var isNotValid = isNotUserValid(location.pathname, loggedUser);\n\n      if (isNotValid.status) {\n        history.push(isNotValid.redirectTo);\n      }\n\n      if (rolesData !== this.state.rolesData) {\n        this.setState({\n          rolesData: rolesData\n        });\n      }\n    }\n  }, {\n    key: \"callAddNewRole\",\n    value: function callAddNewRole(newRoleDetails) {\n      this.props.onAddNewRole(newRoleDetails);\n    }\n  }, {\n    key: \"handleChangeNotification\",\n    value: function handleChangeNotification(id2, id1) {\n      var updateRole = this.state.updateRole;\n      updateRole.rolesId = id1;\n      updateRole.notificationId = id2;\n      this.props.onUpdateRole(updateRole);\n    }\n  }, {\n    key: \"onUserClick\",\n    value: function onUserClick(userId, roleId) {\n      var userRoleUpdateDetails = {\n        userId: userId,\n        roleId: roleId\n      };\n\n      if (roleId !== '-1') {\n        this.props.onUpdateUserRole(userRoleUpdateDetails);\n        this.props.onRolesList();\n      }\n    }\n  }, {\n    key: \"handleDelete\",\n    value: function handleDelete(id) {\n      this.props.onDelete(id).then(function (data) {\n        notify('Success!', data, 'success');\n      }, function (error) {\n        notify('Error!', error, 'error');\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(e, targetId, roleId) {\n      var rolesData = this.state.rolesData;\n\n      var updateRole = _.clone(this.state.updateRole);\n\n      _.map(rolesData.roles, function (role, key) {\n        if (role.id === roleId) {\n          _.map(role.role_pages, function (page, k) {\n            if (page.id === targetId) {\n              page.is_assigned = e.target.checked;\n              updateRole.pageId = targetId;\n\n              _.map(page.actions_list, function (action, ke) {\n                action.is_assigned = e.target.checked;\n              });\n            } else {\n              _.map(page.actions_list, function (action, ke) {\n                if (action.id === targetId) {\n                  action.is_assigned = e.target.checked;\n                  updateRole.actionId = targetId;\n                }\n              });\n            }\n          });\n        }\n      });\n\n      updateRole.rolesId = roleId;\n      this.setState({\n        rolesData: rolesData\n      });\n      this.props.onUpdateRole(updateRole);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(Menu, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      })), React.createElement(AlertNotification, {\n        message: this.props.manageRoles.status_message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"content\",\n        className: \"app-content box-shadow-z0\",\n        role: \"main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Header, {\n        pageTitle: 'Manage Roles',\n        showLoading: this.props.frontend.show_loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"app-body\",\n        id: \"view\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"padding\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(AddRolesForm, {\n        callAddNewRole: this.callAddNewRole,\n        displayData: this.state.rolesData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"row\",\n        id: \"role_page\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-sm-8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(DisplayRolesLists, {\n        displayData: this.state.rolesData,\n        handleClick: function handleClick(id) {\n          return _this2.click(id);\n        },\n        handleChange: this.handleChange,\n        handleChangeNotification: function handleChangeNotification(notificationId, rolesId) {\n          return _this2.handleChangeNotification(notificationId, rolesId);\n        },\n        handleDelete: function handleDelete(id) {\n          _this2.handleDelete(id);\n\n          _this2.setState({\n            deleteId: id\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-sm-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(UsersRolesList, {\n        users: this.state.rolesData,\n        onChange: function onChange(userId, roleId) {\n          _this2.onUserClick(userId, roleId);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      })))))));\n    }\n  }]);\n\n  return ManageRoles;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    frontend: state.frontend.toJS(),\n    loggedUser: state.logged_user.userLogin,\n    usersList: state.usersList.toJS(),\n    manageRoles: state.manageRoles.toJS()\n  };\n}\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onIsAlreadyLogin: function onIsAlreadyLogin() {\n      return dispatch(actions.isAlreadyLogin());\n    },\n    onAddNewRole: function onAddNewRole(newRoleDetails) {\n      return dispatch(actionsManageRoles.addNewRole(newRoleDetails));\n    },\n    onRolesList: function onRolesList() {\n      return dispatch(actionsManageRoles.getRolesList());\n    },\n    onUpdateRole: function onUpdateRole(roleUpdateDetails) {\n      return dispatch(actionsManageRoles.updateRoles(roleUpdateDetails));\n    },\n    onUpdateUserRole: function onUpdateUserRole(userRoleUpdateDetails) {\n      return dispatch(actionsManageRoles.updateUserRole(userRoleUpdateDetails));\n    },\n    onDelete: function onDelete(id) {\n      return dispatch(actionsManageRoles.deleteRole(id));\n    }\n  };\n};\n\nvar VisibleManageUsers = connect(mapStateToProps, mapDispatchToProps)(ManageRoles);\nvar RouterVisibleManageUsers = withRouter(VisibleManageUsers);\nexport default RouterVisibleManageUsers;\nManageRoles.propTypes = {\n  onIsAlreadyLogin: PropTypes.func.isRequired,\n  onFetchUserPolicyDocument: PropTypes.func.isRequired,\n  onRolesList: PropTypes.func.isRequired,\n  route: PropTypes.shape({\n    path: PropTypes.string.isRequired\n  }).isRequired,\n  loggedUser: PropTypes.shape({\n    isLoggedIn: PropTypes.bool.isRequired,\n    data: PropTypes.object.isRequired\n  }).isRequired,\n  policy_documents: PropTypes.shape({\n    policyDocuments: PropTypes.object\n  }).isRequired,\n  usersList: PropTypes.object.isRequired,\n  router: PropTypes.object.isRequired\n};","map":{"version":3,"sources":["/var/www/html/ReactReduxHR/frontend/src/modules/manageRoles/containers/manageRoles.jsx"],"names":["React","connect","withRouter","PropTypes","_","notify","Menu","Header","isNotUserValid","AlertNotification","AddRolesForm","DisplayRolesLists","UsersRolesList","actions","actionsManageRoles","ManageRoles","props","onIsAlreadyLogin","state","status_message","rolesData","updateRole","rolesId","actionId","pageId","notificationId","callAddNewRole","bind","handleChangeNotification","onUserClick","handleChange","onRolesList","loggedUser","location","history","manageRoles","isNotValid","pathname","status","push","redirectTo","setState","newRoleDetails","onAddNewRole","id2","id1","onUpdateRole","userId","roleId","userRoleUpdateDetails","onUpdateUserRole","id","onDelete","then","data","error","e","targetId","clone","map","roles","role","key","role_pages","page","k","is_assigned","target","checked","actions_list","action","ke","frontend","show_loading","click","handleDelete","deleteId","Component","mapStateToProps","toJS","logged_user","userLogin","usersList","mapDispatchToProps","dispatch","isAlreadyLogin","addNewRole","getRolesList","roleUpdateDetails","updateRoles","updateUserRole","deleteRole","VisibleManageUsers","RouterVisibleManageUsers","propTypes","func","isRequired","onFetchUserPolicyDocument","route","shape","path","string","isLoggedIn","bool","object","policy_documents","policyDocuments","router"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport {notify} from '../../../services/notify';\nimport Menu from '../../../components/generic/Menu';\nimport Header from '../../../components/generic/Header';\nimport {isNotUserValid} from '../../../services/generic';\nimport AlertNotification from '../../../components/generic/AlertNotification';\nimport AddRolesForm from '../../../modules/manageRoles/components/AddRolesForm';\nimport DisplayRolesLists from '../../../modules/manageRoles/components/DisplayRolesLists';\nimport UsersRolesList from '../../../components/generic/UsersRolesList';\nimport * as actions from '../../../redux/actions';\nimport * as actionsManageRoles from '../../../redux/manageRoles/actions/manageRoles';\n\nclass ManageRoles extends React.Component {\n  constructor (props) {\n    super(props);\n    this.props.onIsAlreadyLogin();\n    this.state = {\n      status_message: '',\n      rolesData:      [],\n      updateRole:     {rolesId: '', actionId: '', pageId: '', notificationId: ''}\n    };\n    this.callAddNewRole = this.callAddNewRole.bind(this);\n    this.handleChangeNotification = this.handleChangeNotification.bind(this);\n    this.onUserClick = this.onUserClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  componentWillMount () {\n    this.props.onRolesList();\n  }\n  componentWillReceiveProps (props) {\n    let {loggedUser, location, history, manageRoles:{rolesData}} = props;\n    let isNotValid = isNotUserValid(location.pathname, loggedUser);\n    if (isNotValid.status) {\n      history.push(isNotValid.redirectTo);\n    }\n    if (rolesData !== this.state.rolesData) {\n      this.setState({\n        rolesData\n      });\n    }\n  }\n  callAddNewRole (newRoleDetails) {\n    this.props.onAddNewRole(newRoleDetails);\n  }\n  handleChangeNotification (id2, id1) {\n    let {updateRole} = this.state;\n    updateRole.rolesId = id1;\n    updateRole.notificationId = id2;\n    this.props.onUpdateRole(updateRole);\n  }\n  onUserClick (userId, roleId) {\n    let userRoleUpdateDetails = {userId: userId, roleId: roleId};\n    if (roleId !== '-1') {\n      this.props.onUpdateUserRole(userRoleUpdateDetails);\n      this.props.onRolesList();\n    }\n  }\n  handleDelete (id) {\n    this.props.onDelete(id).then((data) => { notify('Success!', data, 'success'); }, (error) => { notify('Error!', error, 'error'); });\n  }\n  handleChange (e, targetId, roleId) {\n    let rolesData = this.state.rolesData;\n    let updateRole = _.clone(this.state.updateRole);\n    _.map(rolesData.roles, (role, key) => {\n      if (role.id === roleId) {\n        _.map(role.role_pages, (page, k) => {\n          if (page.id === targetId) {\n            page.is_assigned = e.target.checked;\n            updateRole.pageId = targetId;\n            _.map(page.actions_list, (action, ke) => {\n              action.is_assigned = e.target.checked;\n            });\n          } else {\n            _.map(page.actions_list, (action, ke) => {\n              if (action.id === targetId) {\n                action.is_assigned = e.target.checked;\n                updateRole.actionId = targetId;\n              }\n            });\n          }\n        });\n      }\n    });\n    updateRole.rolesId = roleId;\n    this.setState({rolesData});\n    this.props.onUpdateRole(updateRole);\n  }\n  render () {\n    return (\n      <div>\n        <Menu {...this.props} />\n        <AlertNotification message={this.props.manageRoles.status_message} />\n        <div id=\"content\" className=\"app-content box-shadow-z0\" role=\"main\">\n          <Header pageTitle={'Manage Roles'} showLoading={this.props.frontend.show_loading} />\n          <div className=\"app-body\" id=\"view\">\n            <div className=\"padding\">\n              <div className=\"row\">\n                <AddRolesForm callAddNewRole={this.callAddNewRole} displayData={this.state.rolesData} />\n              </div>\n              <div className=\"row\" id=\"role_page\">\n                <div className=\"col-sm-8\">\n                  <DisplayRolesLists\n                    displayData={this.state.rolesData}\n                    handleClick={(id) => this.click(id)}\n                    handleChange={this.handleChange}\n                    handleChangeNotification={(notificationId, rolesId) => this.handleChangeNotification(notificationId, rolesId)}\n                    handleDelete={(id) => { this.handleDelete(id); this.setState({deleteId: id}); }}\n                  />\n                </div>\n                <div className=\"col-sm-4\">\n                  <UsersRolesList users={this.state.rolesData} onChange={(userId, roleId) => { this.onUserClick(userId, roleId); }} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps (state) {\n  return {\n    frontend:    state.frontend.toJS(),\n    loggedUser:  state.logged_user.userLogin,\n    usersList:   state.usersList.toJS(),\n    manageRoles: state.manageRoles.toJS()\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onIsAlreadyLogin: () => { return dispatch(actions.isAlreadyLogin()); },\n    onAddNewRole:     (newRoleDetails) => { return dispatch(actionsManageRoles.addNewRole(newRoleDetails)); },\n    onRolesList:      () => { return dispatch(actionsManageRoles.getRolesList()); },\n    onUpdateRole:     (roleUpdateDetails) => { return dispatch(actionsManageRoles.updateRoles(roleUpdateDetails)); },\n    onUpdateUserRole: (userRoleUpdateDetails) => { return dispatch(actionsManageRoles.updateUserRole(userRoleUpdateDetails)); },\n    onDelete:         (id) => { return dispatch(actionsManageRoles.deleteRole(id)); }\n  };\n};\n\nconst VisibleManageUsers = connect(mapStateToProps, mapDispatchToProps)(ManageRoles);\nconst RouterVisibleManageUsers = withRouter(VisibleManageUsers);\nexport default RouterVisibleManageUsers;\n\nManageRoles.propTypes = {\n  onIsAlreadyLogin:          PropTypes.func.isRequired,\n  onFetchUserPolicyDocument: PropTypes.func.isRequired,\n  onRolesList:               PropTypes.func.isRequired,\n  route:                     PropTypes.shape({\n    path: PropTypes.string.isRequired\n  }).isRequired,\n  loggedUser: PropTypes.shape({\n    isLoggedIn: PropTypes.bool.isRequired,\n    data:       PropTypes.object.isRequired\n  }).isRequired,\n  policy_documents: PropTypes.shape({\n    policyDocuments: PropTypes.object\n  }).isRequired,\n  usersList: PropTypes.object.isRequired,\n  router:    PropTypes.object.isRequired\n};\n"]},"metadata":{},"sourceType":"module"}