{"ast":null,"code":"import { createAction } from 'redux-actions';\nimport _ from 'lodash';\nimport { fireAjax } from '../../../services/index';\nimport * as constants from '../../../redux/constants';\nimport { show_loading, hide_loading } from '../../../redux/generic/actions/frontend';\nexport function successUserPendingHours(data) {\n  return createAction(constants.ACTION_SUCCESS_USER_PENDING_HOURS)(data);\n}\nexport function emptyUserPendingHours(data) {\n  return createAction(constants.ACTION_EMPTY_USER_PENDING_HOURS)(data);\n}\nexport function errorUserPendingHours(data) {\n  return createAction(constants.ACTION_ERROR_USER_PENDING_HOURS)(data);\n}\n\nfunction asyncGetUserPendingHours(year, month) {\n  return fireAjax('POST', '', {\n    action: 'get_all_user_previous_month_time',\n    year: year,\n    month: month\n  });\n}\n\nexport function getUserPendingHourList(year, month) {\n  return function (dispatch, getState) {\n    return new Promise(function (resolve, reject) {\n      dispatch(show_loading()); // show loading icon\n\n      asyncGetUserPendingHours(year, month).then(function (json) {\n        dispatch(hide_loading());\n\n        if (json.data !== null) {\n          dispatch(successUserPendingHours(json.data));\n        } else {\n          dispatch(emptyUserPendingHours());\n        }\n      }, function (error) {\n        dispatch(hide_loading()); // hide loading icon\n\n        dispatch(errorUserPendingHours({}));\n      });\n    });\n  };\n} // /-------------------\n\nexport function successAddUserPendingHours(data) {\n  return createAction(constants.ACTION_SUCCESS_ADD_USER_PENDING_HOURS)(data);\n}\nexport function errorAddUserPendingHours(data) {\n  return createAction(constants.ACTION_ERROR_ADD_USER_PENDING_HOURS)(data);\n}\n\nfunction asyncAddUserPendingHours(userid, pendingHour, empId, year, month) {\n  return fireAjax('POST', '', {\n    action: 'add_user_working_hours',\n    userid: userid,\n    working_hours: pendingHour,\n    pending_id: empId\n  });\n}\n\nexport function addUserPendingHour(userid, pendingHour, empId, year, month) {\n  return function (dispatch, getState) {\n    if (_.isEmpty(pendingHour)) {\n      return Promise.reject('Time is empty');\n    }\n\n    return new Promise(function (resolve, reject) {\n      // dispatch(show_loading()); // show loading icon\n      asyncAddUserPendingHours(userid, pendingHour, empId, year, month).then(function (json) {\n        dispatch(hide_loading()); // hide loading icon\n\n        if (json.error == 0) {\n          dispatch(successAddUserPendingHours(json.data.message));\n          resolve(json.data.message);\n          dispatch(getUserPendingHourList(year, month));\n        } else {\n          dispatch(errorAddUserPendingHours(json.data.message));\n        }\n      }, function (error) {\n        dispatch(hide_loading()); // hide loading icon\n\n        dispatch(errorAddUserPendingHours('error occurs'));\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/var/www/html/ReactReduxHR/frontend/src/redux/workingHours/actions/manageUserPendingHour.js"],"names":["createAction","_","fireAjax","constants","show_loading","hide_loading","successUserPendingHours","data","ACTION_SUCCESS_USER_PENDING_HOURS","emptyUserPendingHours","ACTION_EMPTY_USER_PENDING_HOURS","errorUserPendingHours","ACTION_ERROR_USER_PENDING_HOURS","asyncGetUserPendingHours","year","month","action","getUserPendingHourList","dispatch","getState","Promise","resolve","reject","then","json","error","successAddUserPendingHours","ACTION_SUCCESS_ADD_USER_PENDING_HOURS","errorAddUserPendingHours","ACTION_ERROR_ADD_USER_PENDING_HOURS","asyncAddUserPendingHours","userid","pendingHour","empId","working_hours","pending_id","addUserPendingHour","isEmpty","message"],"mappings":"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","sourcesContent":["import {createAction} from 'redux-actions';\nimport _ from 'lodash';\nimport {fireAjax} from '../../../services/index';\nimport * as constants from '../../../redux/constants';\nimport {show_loading, hide_loading} from '../../../redux/generic/actions/frontend';\n\nexport function successUserPendingHours (data) {\n  return createAction(constants.ACTION_SUCCESS_USER_PENDING_HOURS)(data);\n}\n\nexport function emptyUserPendingHours (data) {\n  return createAction(constants.ACTION_EMPTY_USER_PENDING_HOURS)(data);\n}\n\nexport function errorUserPendingHours (data) {\n  return createAction(constants.ACTION_ERROR_USER_PENDING_HOURS)(data);\n}\n\nfunction asyncGetUserPendingHours (year, month) {\n  return fireAjax('POST', '', {\n    action: 'get_all_user_previous_month_time',\n    year:   year,\n    month:  month\n  });\n}\n\nexport function getUserPendingHourList (year, month) {\n  return function (dispatch, getState) {\n    return new Promise((resolve, reject) => {\n      dispatch(show_loading()); // show loading icon\n      asyncGetUserPendingHours(year, month).then((json) => {\n        dispatch(hide_loading());\n        if (json.data !== null) {\n          dispatch(successUserPendingHours(json.data));\n        } else {\n          dispatch(emptyUserPendingHours());\n        }\n      }, (error) => {\n        dispatch(hide_loading()); // hide loading icon\n        dispatch(errorUserPendingHours({}));\n      }\n\t\t\t);\n    });\n  };\n}\n\n// /-------------------\n\nexport function successAddUserPendingHours (data) {\n  return createAction(constants.ACTION_SUCCESS_ADD_USER_PENDING_HOURS)(data);\n}\nexport function errorAddUserPendingHours (data) {\n  return createAction(constants.ACTION_ERROR_ADD_USER_PENDING_HOURS)(data);\n}\n\nfunction asyncAddUserPendingHours (userid, pendingHour, empId, year, month) {\n  return fireAjax('POST', '', {\n    action:        'add_user_working_hours',\n    userid:        userid,\n    working_hours: pendingHour,\n    pending_id:    empId\n  });\n}\n\nexport function addUserPendingHour (userid, pendingHour, empId, year, month) {\n  return function (dispatch, getState) {\n    if (_.isEmpty(pendingHour)) {\n      return Promise.reject('Time is empty');\n    }\n    return new Promise((resolve, reject) => {\n      // dispatch(show_loading()); // show loading icon\n\n      asyncAddUserPendingHours(userid, pendingHour, empId, year, month).then((json) => {\n        dispatch(hide_loading()); // hide loading icon\n        if (json.error == 0) {\n          dispatch(successAddUserPendingHours(json.data.message));\n          resolve(json.data.message);\n          dispatch(getUserPendingHourList(year, month));\n        } else {\n          dispatch(errorAddUserPendingHours(json.data.message));\n        }\n      }, (error) => {\n        dispatch(hide_loading()); // hide loading icon\n        dispatch(errorAddUserPendingHours('error occurs'));\n      }\n\t\t\t);\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}