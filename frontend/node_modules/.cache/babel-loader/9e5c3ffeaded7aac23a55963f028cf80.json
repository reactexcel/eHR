{"ast":null,"code":"import _defineProperty from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _handleActions;\n\nimport { handleActions } from 'redux-actions';\nimport * as constants from '../../../redux/constants';\nimport update from 'immutability-helper';\nimport '../../../redux/update';\nvar initialState = {\n  policyDocument: {\n    data: [],\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  }\n};\n\nvar successLogout = function successLogout(state, action) {\n  return update(state, {\n    policyDocument: {\n      $setInitialState: null\n    }\n  });\n};\n\nvar requestPolicyDocument = function requestPolicyDocument(state, action) {\n  return update(state, {\n    policyDocument: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successPolicyDocument = function successPolicyDocument(state, action) {\n  return update(state, {\n    policyDocument: {\n      $setRequestSuccess: action.payload\n    }\n  });\n};\n\nvar errorPolicyDocument = function errorPolicyDocument(state, action) {\n  return update(state, {\n    policyDocument: {\n      $setRequestError: action.payload\n    }\n  });\n};\n\nvar requestSubmitDocs = function requestSubmitDocs(state, action) {\n  return update(state, {\n    policyDocument: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successSubmitDocs = function successSubmitDocs(state, action) {\n  return update(state, {\n    policyDocument: {\n      $setSuccessMessage: action.payload\n    }\n  });\n};\n\nvar errorSubmitDocs = function errorSubmitDocs(state, action) {\n  return update(state, {\n    policyDocument: {\n      $setRequestError: action.payload\n    }\n  });\n};\n\nvar requestUpdateRead = function requestUpdateRead(state, action) {\n  return update(state, {\n    policyDocument: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successUpdateRead = function successUpdateRead(state, action) {\n  return update(state, {\n    policyDocument: {\n      $setSuccessMessage: action.payload\n    }\n  });\n};\n\nvar errorUpdateRead = function errorUpdateRead(state, action) {\n  return update(state, {\n    policyDocument: {\n      $setRequestError: action.payload\n    }\n  });\n};\n\nexport default handleActions((_handleActions = {}, _defineProperty(_handleActions, constants.REQUEST_POLICY_DOCUMENT, requestPolicyDocument), _defineProperty(_handleActions, constants.REQUEST_USER_POLICY_DOCUMENT, requestPolicyDocument), _defineProperty(_handleActions, constants.SUCCESS_POLICY_DOCUMENT, successPolicyDocument), _defineProperty(_handleActions, constants.ERROR_POLICY_DOCUMENT, errorPolicyDocument), _defineProperty(_handleActions, constants.REQUEST_SUBMIT_DOCS, requestSubmitDocs), _defineProperty(_handleActions, constants.SUCCESS_SUBMIT_DOCS, successSubmitDocs), _defineProperty(_handleActions, constants.ERROR_SUBMIT_DOCS, errorSubmitDocs), _defineProperty(_handleActions, constants.REQUEST_UPDATE_READ, requestUpdateRead), _defineProperty(_handleActions, constants.SUCCESS_UPDATE_READ, successUpdateRead), _defineProperty(_handleActions, constants.ERROR_UPDATE_READ, errorUpdateRead), _defineProperty(_handleActions, constants.LOGOUT_SUCCESS, successLogout), _handleActions), initialState);","map":{"version":3,"sources":["/var/www/html/ReactReduxHR/frontend/src/redux/policyDocuments/reducers/policyDocuments.js"],"names":["handleActions","constants","update","initialState","policyDocument","data","isLoading","isError","isSuccess","message","successLogout","state","action","$setInitialState","requestPolicyDocument","$setRequestLoading","successPolicyDocument","$setRequestSuccess","payload","errorPolicyDocument","$setRequestError","requestSubmitDocs","successSubmitDocs","$setSuccessMessage","errorSubmitDocs","requestUpdateRead","successUpdateRead","errorUpdateRead","REQUEST_POLICY_DOCUMENT","REQUEST_USER_POLICY_DOCUMENT","SUCCESS_POLICY_DOCUMENT","ERROR_POLICY_DOCUMENT","REQUEST_SUBMIT_DOCS","SUCCESS_SUBMIT_DOCS","ERROR_SUBMIT_DOCS","REQUEST_UPDATE_READ","SUCCESS_UPDATE_READ","ERROR_UPDATE_READ","LOGOUT_SUCCESS"],"mappings":"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","sourcesContent":["import {handleActions} from 'redux-actions';\nimport * as constants from '../../../redux/constants';\nimport update from 'immutability-helper';\nimport '../../../redux/update';\n\nlet initialState = {\n  policyDocument: {\n    data:      [],\n    isLoading: false,\n    isError:   false,\n    isSuccess: false,\n    message:   ''\n  }\n};\n\nconst successLogout = (state, action) => update(state, {\n  policyDocument: {$setInitialState: null}\n});\n\nconst requestPolicyDocument = (state, action) => update(state, {\n  policyDocument: {$setRequestLoading: null}\n});\n\nconst successPolicyDocument = (state, action) => update(state, {\n  policyDocument: {$setRequestSuccess: action.payload}\n});\n\nconst errorPolicyDocument = (state, action) => update(state, {\n  policyDocument: {$setRequestError: action.payload}\n});\n\nconst requestSubmitDocs = (state, action) => update(state, {\n  policyDocument: {$setRequestLoading: null}\n});\n\nconst successSubmitDocs = (state, action) => update(state, {\n  policyDocument: {$setSuccessMessage: action.payload}\n});\n\nconst errorSubmitDocs = (state, action) => update(state, {\n  policyDocument: {$setRequestError: action.payload}\n});\n\nconst requestUpdateRead = (state, action) => update(state, {\n  policyDocument: {$setRequestLoading: null}\n});\n\nconst successUpdateRead = (state, action) => update(state, {\n  policyDocument: {$setSuccessMessage: action.payload}\n});\n\nconst errorUpdateRead = (state, action) => update(state, {\n  policyDocument: {$setRequestError: action.payload}\n});\n\nexport default handleActions({\n  [constants.REQUEST_POLICY_DOCUMENT]:      requestPolicyDocument,\n  [constants.REQUEST_USER_POLICY_DOCUMENT]: requestPolicyDocument,\n  [constants.SUCCESS_POLICY_DOCUMENT]:      successPolicyDocument,\n  [constants.ERROR_POLICY_DOCUMENT]:        errorPolicyDocument,\n  [constants.REQUEST_SUBMIT_DOCS]:          requestSubmitDocs,\n  [constants.SUCCESS_SUBMIT_DOCS]:          successSubmitDocs,\n  [constants.ERROR_SUBMIT_DOCS]:            errorSubmitDocs,\n  [constants.REQUEST_UPDATE_READ]:          requestUpdateRead,\n  [constants.SUCCESS_UPDATE_READ]:          successUpdateRead,\n  [constants.ERROR_UPDATE_READ]:            errorUpdateRead,\n  [constants.LOGOUT_SUCCESS]:               successLogout\n}, initialState);\n"]},"metadata":{},"sourceType":"module"}