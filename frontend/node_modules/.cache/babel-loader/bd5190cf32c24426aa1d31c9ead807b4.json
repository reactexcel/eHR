{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchActions),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { takeLatest } from 'redux-saga/effects';\nimport * as constants from './redux/constants';\nimport { loginRequest, isAlreadyLoggedIn, forgotPassword, logout } from './redux/auth/actions';\nimport { holidayList, addHoliday, holidayType, deleteHoliday } from './redux/holidays/actions';\nimport { getAttendanceUploadSettings, addAttendanceUploadSettings, deleteAttendanceUploadSettings, requestResetPasswordSetting, requestResetPasswordStatus, requestClearResetPasswordData } from './redux/settings/actions';\nimport { getTeamStats, getMonthlyReportAllUsers, getEmployeLifeCycle, getEmployeeHours, getEmployeeMonthlyHours, getEmployeePerformance, getUserIdList, getLeastActiveEmp } from './redux/manageUsers/actions/dashboard';\nimport { userMonthlyAttendance } from './redux/attendance/actions/monthlyAttendance';\nimport { getUserDayAttendance, userAttendanceStatus } from './redux/attendance/actions/attendanceRequests';\nimport { getUserDaySummary, updateUserDaySummary, empUpdateDaySummary } from './redux/attendance/actions/userDaySummary';\nimport { getUsersList } from './redux/generic/actions/usersList';\nimport { fetchUserPolicyDocument, submitPolicyDocs, updateReadStatus, fetchPolicyDocument } from './redux/policyDocuments/actions/index';\nimport { getTeamList, saveTeam, getTeam } from './redux/team/actions/teamList';\nimport { healthStatsRequest, healthStatsSecretKeyListRequest, healthStatsAddSecretKeyRequest, healthStatsDeleteSecretKeyRequest, healthStatsRegenerateSecretKeyRequest, deleteHealthStats, requestStatsHistory, requestStatsLeave } from './redux/healthStats/actions/healthStats';\nexport function watchActions() {\n  return _regeneratorRuntime.wrap(function watchActions$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeLatest(constants.USER_LOGIN_REQUEST, loginRequest);\n\n        case 2:\n          _context.next = 4;\n          return takeLatest(constants.IS_ALREADY_LOGGED_IN, isAlreadyLoggedIn);\n\n        case 4:\n          _context.next = 6;\n          return takeLatest(constants.REQUEST_FORGOT_PASSWORD, forgotPassword);\n\n        case 6:\n          _context.next = 8;\n          return takeLatest(constants.REQUEST_LOGOUT, logout);\n\n        case 8:\n          _context.next = 10;\n          return takeLatest(constants.REQUEST_HOLIDAYSLIST, holidayList);\n\n        case 10:\n          _context.next = 12;\n          return takeLatest(constants.REQUEST_ADDHOLIDAYS, addHoliday);\n\n        case 12:\n          _context.next = 14;\n          return takeLatest(constants.REQUEST_HOLIDAYTYPE, holidayType);\n\n        case 14:\n          _context.next = 16;\n          return takeLatest(constants.REQUEST_DELETEHOLIDAYS, deleteHoliday);\n\n        case 16:\n          _context.next = 18;\n          return takeLatest(constants.REQUEST_USER_ATTENDANCE, userMonthlyAttendance);\n\n        case 18:\n          _context.next = 20;\n          return takeLatest(constants.REQUEST_USER_DAY_SUMMARY, getUserDaySummary);\n\n        case 20:\n          _context.next = 22;\n          return takeLatest(constants.REQUEST_UPDATE_USER_DAY_SUMMARY, updateUserDaySummary);\n\n        case 22:\n          _context.next = 24;\n          return takeLatest(constants.REQUEST_USER_ATTENDANCE_REQUEST, getUserDayAttendance);\n\n        case 24:\n          _context.next = 26;\n          return takeLatest(constants.REQUEST_USER_ATTENDANCE_STATUS, userAttendanceStatus);\n\n        case 26:\n          _context.next = 28;\n          return takeLatest(constants.REQUEST_UPDATE_EMP_DAY_SUMMARY, empUpdateDaySummary);\n\n        case 28:\n          _context.next = 30;\n          return takeLatest(constants.REQUEST_USERSLIST, getUsersList);\n\n        case 30:\n          _context.next = 32;\n          return takeLatest(constants.REQUEST_HEALTH_STATS, healthStatsRequest);\n\n        case 32:\n          _context.next = 34;\n          return takeLatest(constants.DELETE_HEALTH_STATS, deleteHealthStats);\n\n        case 34:\n          _context.next = 36;\n          return takeLatest(constants.REQUEST_STATS_HISTORY, requestStatsHistory);\n\n        case 36:\n          _context.next = 38;\n          return takeLatest(constants.REQUEST_HEALTH_STATS_SECRET_KEY_LIST, healthStatsSecretKeyListRequest);\n\n        case 38:\n          _context.next = 40;\n          return takeLatest(constants.REQUEST_HEALTH_STATS_ADD_SECRET_KEY, healthStatsAddSecretKeyRequest);\n\n        case 40:\n          _context.next = 42;\n          return takeLatest(constants.REQUEST_HEALTH_STATS_DELETE_SECRET_KEY, healthStatsDeleteSecretKeyRequest);\n\n        case 42:\n          _context.next = 44;\n          return takeLatest(constants.REQUEST_HEALTH_STATS_REGENERATE_SECRET_KEY, healthStatsRegenerateSecretKeyRequest);\n\n        case 44:\n          _context.next = 46;\n          return takeLatest(constants.REQUEST_STATS_LEAVE_HISTORY, requestStatsLeave);\n\n        case 46:\n          _context.next = 48;\n          return takeLatest(constants.REQUEST_TEAM_STATS, getTeamStats);\n\n        case 48:\n          _context.next = 50;\n          return takeLatest(constants.REQUEST_MONTHLY_REPORT_ALL_USERS, getMonthlyReportAllUsers);\n\n        case 50:\n          _context.next = 52;\n          return takeLatest(constants.REQUEST_EMP_LIFE_CYCLE, getEmployeLifeCycle);\n\n        case 52:\n          _context.next = 54;\n          return takeLatest(constants.REQUEST_EMP_HOURS, getEmployeeHours);\n\n        case 54:\n          _context.next = 56;\n          return takeLatest(constants.REQUEST_EMP_MONTHLY_HOURS, getEmployeeMonthlyHours);\n\n        case 56:\n          _context.next = 58;\n          return takeLatest(constants.REQUEST_EMP_PERFORMANCE, getEmployeePerformance);\n\n        case 58:\n          _context.next = 60;\n          return takeLatest(constants.REQUEST_USER_LIST, getUserIdList);\n\n        case 60:\n          _context.next = 62;\n          return takeLatest(constants.REQUEST_LEAST_ACTIVE_EMP, getLeastActiveEmp);\n\n        case 62:\n          _context.next = 64;\n          return takeLatest(constants.REQUEST_USER_POLICY_DOCUMENT, fetchUserPolicyDocument);\n\n        case 64:\n          _context.next = 66;\n          return takeLatest(constants.REQUEST_SUBMIT_DOCS, submitPolicyDocs);\n\n        case 66:\n          _context.next = 68;\n          return takeLatest(constants.REQUEST_UPDATE_READ, updateReadStatus);\n\n        case 68:\n          _context.next = 70;\n          return takeLatest(constants.REQUEST_POLICY_DOCUMENT, fetchPolicyDocument);\n\n        case 70:\n          _context.next = 72;\n          return takeLatest(constants.REQUEST_TEAM_LIST, getTeamList);\n\n        case 72:\n          _context.next = 74;\n          return takeLatest(constants.REQUEST_ADD_TEAM, saveTeam);\n\n        case 74:\n          _context.next = 76;\n          return takeLatest(constants.REQUEST_GET_TEAM, getTeam);\n\n        case 76:\n          _context.next = 78;\n          return takeLatest(constants.REQUEST_GET_ATTANDANCE_UPLOAD_SETTING, getAttendanceUploadSettings);\n\n        case 78:\n          _context.next = 80;\n          return takeLatest(constants.REQUEST_ADD_ATTANDANCE_UPLOAD_SETTING, addAttendanceUploadSettings);\n\n        case 80:\n          _context.next = 82;\n          return takeLatest(constants.REQUEST_DELETE_ATTANDANCE_UPLOAD_SETTING, deleteAttendanceUploadSettings);\n\n        case 82:\n          _context.next = 84;\n          return takeLatest(constants.REQUEST_RESET_PASSWORD_SETTING, requestResetPasswordSetting);\n\n        case 84:\n          _context.next = 86;\n          return takeLatest(constants.REQUEST_RESET_PASSWORD_STATUS, requestResetPasswordStatus);\n\n        case 86:\n          _context.next = 88;\n          return takeLatest(constants.REQUEST_CLEAR_RESET_PASSWORD_DATA, requestClearResetPasswordData);\n\n        case 88:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return [watchActions()];\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/var/www/html/ReactReduxHR/frontend/src/sagas.js"],"names":["watchActions","rootSaga","takeLatest","constants","loginRequest","isAlreadyLoggedIn","forgotPassword","logout","holidayList","addHoliday","holidayType","deleteHoliday","getAttendanceUploadSettings","addAttendanceUploadSettings","deleteAttendanceUploadSettings","requestResetPasswordSetting","requestResetPasswordStatus","requestClearResetPasswordData","getTeamStats","getMonthlyReportAllUsers","getEmployeLifeCycle","getEmployeeHours","getEmployeeMonthlyHours","getEmployeePerformance","getUserIdList","getLeastActiveEmp","userMonthlyAttendance","getUserDayAttendance","userAttendanceStatus","getUserDaySummary","updateUserDaySummary","empUpdateDaySummary","getUsersList","fetchUserPolicyDocument","submitPolicyDocs","updateReadStatus","fetchPolicyDocument","getTeamList","saveTeam","getTeam","healthStatsRequest","healthStatsSecretKeyListRequest","healthStatsAddSecretKeyRequest","healthStatsDeleteSecretKeyRequest","healthStatsRegenerateSecretKeyRequest","deleteHealthStats","requestStatsHistory","requestStatsLeave","USER_LOGIN_REQUEST","IS_ALREADY_LOGGED_IN","REQUEST_FORGOT_PASSWORD","REQUEST_LOGOUT","REQUEST_HOLIDAYSLIST","REQUEST_ADDHOLIDAYS","REQUEST_HOLIDAYTYPE","REQUEST_DELETEHOLIDAYS","REQUEST_USER_ATTENDANCE","REQUEST_USER_DAY_SUMMARY","REQUEST_UPDATE_USER_DAY_SUMMARY","REQUEST_USER_ATTENDANCE_REQUEST","REQUEST_USER_ATTENDANCE_STATUS","REQUEST_UPDATE_EMP_DAY_SUMMARY","REQUEST_USERSLIST","REQUEST_HEALTH_STATS","DELETE_HEALTH_STATS","REQUEST_STATS_HISTORY","REQUEST_HEALTH_STATS_SECRET_KEY_LIST","REQUEST_HEALTH_STATS_ADD_SECRET_KEY","REQUEST_HEALTH_STATS_DELETE_SECRET_KEY","REQUEST_HEALTH_STATS_REGENERATE_SECRET_KEY","REQUEST_STATS_LEAVE_HISTORY","REQUEST_TEAM_STATS","REQUEST_MONTHLY_REPORT_ALL_USERS","REQUEST_EMP_LIFE_CYCLE","REQUEST_EMP_HOURS","REQUEST_EMP_MONTHLY_HOURS","REQUEST_EMP_PERFORMANCE","REQUEST_USER_LIST","REQUEST_LEAST_ACTIVE_EMP","REQUEST_USER_POLICY_DOCUMENT","REQUEST_SUBMIT_DOCS","REQUEST_UPDATE_READ","REQUEST_POLICY_DOCUMENT","REQUEST_TEAM_LIST","REQUEST_ADD_TEAM","REQUEST_GET_TEAM","REQUEST_GET_ATTANDANCE_UPLOAD_SETTING","REQUEST_ADD_ATTANDANCE_UPLOAD_SETTING","REQUEST_DELETE_ATTANDANCE_UPLOAD_SETTING","REQUEST_RESET_PASSWORD_SETTING","REQUEST_RESET_PASSWORD_STATUS","REQUEST_CLEAR_RESET_PASSWORD_DATA"],"mappings":"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","sourcesContent":["import {takeLatest} from 'redux-saga/effects';\nimport * as constants from './redux/constants';\nimport {loginRequest, isAlreadyLoggedIn, forgotPassword, logout} from './redux/auth/actions';\nimport {holidayList, addHoliday, holidayType, deleteHoliday} from './redux/holidays/actions';\nimport {getAttendanceUploadSettings, addAttendanceUploadSettings, deleteAttendanceUploadSettings, requestResetPasswordSetting, requestResetPasswordStatus, requestClearResetPasswordData } from './redux/settings/actions';\nimport { getTeamStats, getMonthlyReportAllUsers, getEmployeLifeCycle, getEmployeeHours, getEmployeeMonthlyHours, getEmployeePerformance, getUserIdList, getLeastActiveEmp} from './redux/manageUsers/actions/dashboard';\nimport {userMonthlyAttendance} from './redux/attendance/actions/monthlyAttendance';\nimport {getUserDayAttendance, userAttendanceStatus} from './redux/attendance/actions/attendanceRequests';\nimport {getUserDaySummary, updateUserDaySummary, empUpdateDaySummary} from './redux/attendance/actions/userDaySummary';\nimport {getUsersList} from './redux/generic/actions/usersList';\nimport {fetchUserPolicyDocument, submitPolicyDocs, updateReadStatus, fetchPolicyDocument} from './redux/policyDocuments/actions/index';\nimport {getTeamList, saveTeam, getTeam} from './redux/team/actions/teamList';\nimport {healthStatsRequest, healthStatsSecretKeyListRequest, healthStatsAddSecretKeyRequest, healthStatsDeleteSecretKeyRequest, healthStatsRegenerateSecretKeyRequest, deleteHealthStats, requestStatsHistory, requestStatsLeave} from './redux/healthStats/actions/healthStats';\n\nexport function* watchActions () {\n  yield takeLatest(constants.USER_LOGIN_REQUEST, loginRequest);\n  yield takeLatest(constants.IS_ALREADY_LOGGED_IN, isAlreadyLoggedIn);\n  yield takeLatest(constants.REQUEST_FORGOT_PASSWORD, forgotPassword);\n  yield takeLatest(constants.REQUEST_LOGOUT, logout);\n\n  yield takeLatest(constants.REQUEST_HOLIDAYSLIST, holidayList);\n  yield takeLatest(constants.REQUEST_ADDHOLIDAYS, addHoliday);\n  yield takeLatest(constants.REQUEST_HOLIDAYTYPE, holidayType);\n  yield takeLatest(constants.REQUEST_DELETEHOLIDAYS, deleteHoliday);\n\n  yield takeLatest(constants.REQUEST_USER_ATTENDANCE, userMonthlyAttendance);\n  yield takeLatest(constants.REQUEST_USER_DAY_SUMMARY, getUserDaySummary);\n  yield takeLatest(constants.REQUEST_UPDATE_USER_DAY_SUMMARY, updateUserDaySummary);\n\n  yield takeLatest(constants.REQUEST_USER_ATTENDANCE_REQUEST, getUserDayAttendance);\n  yield takeLatest(constants.REQUEST_USER_ATTENDANCE_STATUS, userAttendanceStatus);\n  yield takeLatest(constants.REQUEST_UPDATE_EMP_DAY_SUMMARY, empUpdateDaySummary);\n\n  yield takeLatest(constants.REQUEST_USERSLIST, getUsersList);\n  yield takeLatest(constants.REQUEST_HEALTH_STATS, healthStatsRequest);\n  yield takeLatest(constants.DELETE_HEALTH_STATS, deleteHealthStats);\n  yield takeLatest(constants.REQUEST_STATS_HISTORY,requestStatsHistory)\n  yield takeLatest(constants.REQUEST_HEALTH_STATS_SECRET_KEY_LIST, healthStatsSecretKeyListRequest);\n  yield takeLatest(constants.REQUEST_HEALTH_STATS_ADD_SECRET_KEY, healthStatsAddSecretKeyRequest);\n  yield takeLatest(constants.REQUEST_HEALTH_STATS_DELETE_SECRET_KEY, healthStatsDeleteSecretKeyRequest);\n  yield takeLatest(constants.REQUEST_HEALTH_STATS_REGENERATE_SECRET_KEY, healthStatsRegenerateSecretKeyRequest);\n  yield takeLatest(constants.REQUEST_STATS_LEAVE_HISTORY, requestStatsLeave);\n  \n\n  yield takeLatest(constants.REQUEST_TEAM_STATS, getTeamStats);\n  yield takeLatest(constants.REQUEST_MONTHLY_REPORT_ALL_USERS, getMonthlyReportAllUsers);\n  yield takeLatest(constants.REQUEST_EMP_LIFE_CYCLE, getEmployeLifeCycle);\n  yield takeLatest(constants.REQUEST_EMP_HOURS, getEmployeeHours);\n  yield takeLatest(constants.REQUEST_EMP_MONTHLY_HOURS, getEmployeeMonthlyHours);\n  yield takeLatest(constants.REQUEST_EMP_PERFORMANCE, getEmployeePerformance);\n  yield takeLatest(constants.REQUEST_USER_LIST, getUserIdList);\n  yield takeLatest(constants.REQUEST_LEAST_ACTIVE_EMP, getLeastActiveEmp);\n  \n  yield takeLatest(constants.REQUEST_USER_POLICY_DOCUMENT, fetchUserPolicyDocument);\n\n  yield takeLatest(constants.REQUEST_SUBMIT_DOCS, submitPolicyDocs);\n  yield takeLatest(constants.REQUEST_UPDATE_READ, updateReadStatus);\n\n  yield takeLatest(constants.REQUEST_POLICY_DOCUMENT, fetchPolicyDocument);\n  yield takeLatest(constants.REQUEST_TEAM_LIST, getTeamList);\n  yield takeLatest(constants.REQUEST_ADD_TEAM, saveTeam);\n  yield takeLatest(constants.REQUEST_GET_TEAM, getTeam);\n\n  yield takeLatest(constants.REQUEST_GET_ATTANDANCE_UPLOAD_SETTING, getAttendanceUploadSettings);\n  yield takeLatest(constants.REQUEST_ADD_ATTANDANCE_UPLOAD_SETTING, addAttendanceUploadSettings);\n  yield takeLatest(constants.REQUEST_DELETE_ATTANDANCE_UPLOAD_SETTING, deleteAttendanceUploadSettings);\n\n\n  yield takeLatest(constants.REQUEST_RESET_PASSWORD_SETTING, requestResetPasswordSetting);\n  yield takeLatest(constants.REQUEST_RESET_PASSWORD_STATUS, requestResetPasswordStatus);\n  yield takeLatest(constants.REQUEST_CLEAR_RESET_PASSWORD_DATA, requestClearResetPasswordData);\n\n}\n\nexport default function* rootSaga () {\n  yield [\n    watchActions()\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}