{"ast":null,"code":"import _classCallCheck from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/var/www/html/ReactReduxHR/frontend/src/modules/uploadImageCompressed/UploadImageComp.jsx\";\nimport React, { Component } from \"react\";\nimport ImageCompressor from \"image-compressor.js\";\nimport { notify } from \"../../services/notify\";\nimport { connect } from \"react-redux\";\nimport { qualityValue } from \"../../helper/helper\";\nimport axios from \"axios\";\nimport CircularProgress from \"material-ui/CircularProgress\";\nimport * as actionsManageDevice from \"../../redux/inventory/actions/inventory\";\nimport * as actionsUploadFile from \"../../redux/uploadImageComp/actions/uploadImageComp\";\nimport * as actionMyDocuments from \"../../redux/myDocuments/actions/myDocument\";\nimport { format } from \"url\";\n\nvar UploadImageComp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UploadImageComp, _Component);\n\n  function UploadImageComp() {\n    var _this;\n\n    _classCallCheck(this, UploadImageComp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UploadImageComp).call(this));\n    _this.state = {\n      loading: false\n    };\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(UploadImageComp, [{\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      var _this2 = this;\n\n      e.preventDefault();\n      var params = this.props.params;\n      var file = this.props.file;\n      var fileName = this.props.fileName; //the name must be same as in backend\n\n      var url = this.props.url;\n\n      if (!file) {\n        return;\n      } else if (!file.type.includes(\"image\")) {\n        var formData = new FormData();\n        var isRole = this.props.loggedUser.data.role;\n\n        for (var key in params) {\n          formData.append(key, params[key]);\n        }\n\n        formData.delete('imageUrl');\n        formData.append(fileName, file);\n        formData.append(\"submit\", \"Upload\");\n        this.props.onUploadFile(formData, url, isRole);\n      } else {\n        this.setState({\n          loading: true\n        });\n        var quality = qualityValue(file);\n        var imageCompressor = new ImageCompressor();\n        imageCompressor.compress(file, {\n          quality: quality\n        }).then(function (file) {\n          var formData = new FormData();\n\n          for (var _key in params) {\n            formData.append(_key, params[_key]);\n          }\n\n          formData.delete('imageUrl'); //IMPORTANT: it is the image in ImagePreview  \n\n          formData.append(fileName, file, file.name);\n          formData.append(\"submit\", \"Upload\"); // Send the compressed image file to server with XMLHttpRequest.\n          // this.props.uploadFile(formData, url);\n\n          axios.post(url, formData).then(function (data) {\n            notify(\"Success !\", \"File uploaded successfully\", \"success\");\n\n            _this2.setState({\n              loading: false\n            });\n\n            if (_this2.props.loggedUser.data.role === \"Admin\") {\n              _this2.props.onFetchDevice();\n\n              _this2.props.onFetchUnapprovedUser();\n\n              _this2.props.onGetMyDocuments();\n            } else if (_this2.props.loggedUser.data.role === \"HR\") {\n              return; // this.props.onFetchDevice();\n            } else {\n              _this2.props.onGetMyDocuments();\n            }\n          }).catch(function (error) {\n            if (error.request.status === 413) {\n              notify(\"Error\", \"File too large to upload\", \"error\");\n\n              _this2.setState({\n                loading: false\n              });\n            } else {\n              notify(\"Error\", error.request.statusText, \"error\");\n\n              _this2.setState({\n                loading: false\n              });\n            }\n          });\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, this.props.loading || this.state.loading ? React.createElement(CircularProgress, {\n        size: 30,\n        thickness: 3,\n        style: {\n          marginLeft: \"50%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }) : React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"submit\",\n        name: \"submit\",\n        value: \"Upload\",\n        className: \"col-xs-12 md-btn md-raised indigo\",\n        onClick: function onClick(e) {\n          return _this3.props.callUpdateDocuments(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return UploadImageComp;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loading: state.uploadImage.loading,\n    loggedUser: state.logged_user.userLogin\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onFetchDevice: function onFetchDevice() {\n      return dispatch(actionsManageDevice.get_machines_detail());\n    },\n    onUploadFile: function onUploadFile() {\n      return dispatch(actionsUploadFile.uploadFile());\n    },\n    onFetchUnapprovedUser: function onFetchUnapprovedUser() {\n      return dispatch(actionsManageDevice.unapprovedUser());\n    },\n    onGetMyDocuments: function onGetMyDocuments() {\n      return dispatch(actionMyDocuments.getMyDocument());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadImageComp);","map":{"version":3,"sources":["/var/www/html/ReactReduxHR/frontend/src/modules/uploadImageCompressed/UploadImageComp.jsx"],"names":["React","Component","ImageCompressor","notify","connect","qualityValue","axios","CircularProgress","actionsManageDevice","actionsUploadFile","actionMyDocuments","format","UploadImageComp","state","loading","handleSubmit","bind","e","preventDefault","params","props","file","fileName","url","type","includes","formData","FormData","isRole","loggedUser","data","role","key","append","delete","onUploadFile","setState","quality","imageCompressor","compress","then","name","post","onFetchDevice","onFetchUnapprovedUser","onGetMyDocuments","catch","error","request","status","statusText","marginLeft","callUpdateDocuments","mapStateToProps","uploadImage","logged_user","userLogin","mapDispatchToProps","dispatch","get_machines_detail","uploadFile","unapprovedUser","getMyDocument"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,eAAP,MAA4B,qBAA5B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAO,KAAKC,mBAAZ,MAAqC,yCAArC;AACA,OAAO,KAAKC,iBAAZ,MAAmC,qDAAnC;AACA,OAAO,KAAKC,iBAAZ,MAAmC,4CAAnC;AACA,SAASC,MAAT,QAAuB,KAAvB;;IACMC,e;;;;;AACJ,6BAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAIA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,uDAApB;AANY;AAOb;;;;iCAEYC,C,EAAG;AAAA;;AACdA,MAAAA,CAAC,CAACC,cAAF;AADc,UAENC,MAFM,GAEK,KAAKC,KAFV,CAEND,MAFM;AAGd,UAAME,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;AACA,UAAMC,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B,CAJc,CAIwB;;AACtC,UAAMC,GAAG,GAAG,KAAKH,KAAL,CAAWG,GAAvB;;AAEA,UAAI,CAACF,IAAL,EAAW;AACT;AACD,OAFD,MAEO,IAAI,CAACA,IAAI,CAACG,IAAL,CAAUC,QAAV,CAAmB,OAAnB,CAAL,EAAkC;AACvC,YAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACA,YAAIC,MAAM,GAAG,KAAKR,KAAL,CAAWS,UAAX,CAAsBC,IAAtB,CAA2BC,IAAxC;;AAEA,aAAK,IAAIC,GAAT,IAAgBb,MAAhB,EAAwB;AACtBO,UAAAA,QAAQ,CAACO,MAAT,CAAgBD,GAAhB,EAAqBb,MAAM,CAACa,GAAD,CAA3B;AACD;;AACDN,QAAAA,QAAQ,CAACQ,MAAT,CAAgB,UAAhB;AACAR,QAAAA,QAAQ,CAACO,MAAT,CAAgBX,QAAhB,EAA0BD,IAA1B;AACAK,QAAAA,QAAQ,CAACO,MAAT,CAAgB,QAAhB,EAA0B,QAA1B;AAEA,aAAKb,KAAL,CAAWe,YAAX,CAAwBT,QAAxB,EAAkCH,GAAlC,EAAsCK,MAAtC;AACD,OAZM,MAYA;AACL,aAAKQ,QAAL,CAAc;AAAEtB,UAAAA,OAAO,EAAE;AAAX,SAAd;AACA,YAAIuB,OAAO,GAAGhC,YAAY,CAACgB,IAAD,CAA1B;AACA,YAAIiB,eAAe,GAAG,IAAIpC,eAAJ,EAAtB;AACAoC,QAAAA,eAAe,CACZC,QADH,CACYlB,IADZ,EACkB;AACdgB,UAAAA,OAAO,EAAEA;AADK,SADlB,EAIGG,IAJH,CAIQ,UAAAnB,IAAI,EAAI;AACZ,cAAMK,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;;AACA,eAAK,IAAIK,IAAT,IAAgBb,MAAhB,EAAwB;AACtBO,YAAAA,QAAQ,CAACO,MAAT,CAAgBD,IAAhB,EAAqBb,MAAM,CAACa,IAAD,CAA3B;AACD;;AACDN,UAAAA,QAAQ,CAACQ,MAAT,CAAgB,UAAhB,EALY,CAKiB;;AAC7BR,UAAAA,QAAQ,CAACO,MAAT,CAAgBX,QAAhB,EAA0BD,IAA1B,EAAgCA,IAAI,CAACoB,IAArC;AACAf,UAAAA,QAAQ,CAACO,MAAT,CAAgB,QAAhB,EAA0B,QAA1B,EAPY,CAQZ;AACA;;AACA3B,UAAAA,KAAK,CACFoC,IADH,CACQnB,GADR,EACaG,QADb,EAEGc,IAFH,CAEQ,UAAAV,IAAI,EAAI;AACZ3B,YAAAA,MAAM,CAAC,WAAD,gCAA4C,SAA5C,CAAN;;AACA,YAAA,MAAI,CAACiC,QAAL,CAAc;AAAEtB,cAAAA,OAAO,EAAE;AAAX,aAAd;;AACA,gBACE,MAAI,CAACM,KAAL,CAAWS,UAAX,CAAsBC,IAAtB,CAA2BC,IAA3B,KAAoC,OADtC,EAEE;AACA,cAAA,MAAI,CAACX,KAAL,CAAWuB,aAAX;;AACA,cAAA,MAAI,CAACvB,KAAL,CAAWwB,qBAAX;;AACA,cAAA,MAAI,CAACxB,KAAL,CAAWyB,gBAAX;AACD,aAND,MAOK,IAAG,MAAI,CAACzB,KAAL,CAAWS,UAAX,CAAsBC,IAAtB,CAA2BC,IAA3B,KAAoC,IAAvC,EACN;AACC,qBADD,CAEC;AACD,aAJM,MAKH;AACF,cAAA,MAAI,CAACX,KAAL,CAAWyB,gBAAX;AACD;AACA,WApBH,EAqBGC,KArBH,CAqBS,UAAAC,KAAK,EAAI;AACd,gBAAIA,KAAK,CAACC,OAAN,CAAcC,MAAd,KAAyB,GAA7B,EAAkC;AAChC9C,cAAAA,MAAM,CAAC,OAAD,EAAU,0BAAV,EAAsC,OAAtC,CAAN;;AACA,cAAA,MAAI,CAACiC,QAAL,CAAc;AAAEtB,gBAAAA,OAAO,EAAE;AAAX,eAAd;AACD,aAHD,MAII;AACFX,cAAAA,MAAM,CAAC,OAAD,EAAU4C,KAAK,CAACC,OAAN,CAAcE,UAAxB,EAAoC,OAApC,CAAN;;AACA,cAAA,MAAI,CAACd,QAAL,CAAc;AAAEtB,gBAAAA,OAAO,EAAE;AAAX,eAAd;AACD;AACF,WA9BH;AA+BD,SA7CH;AA8CD;AACF;;;6BAEQ;AAAA;;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKM,KAAL,CAAWN,OAAX,IAAsB,KAAKD,KAAL,CAAWC,OAAjC,GACC,oBAAC,gBAAD;AACE,QAAA,IAAI,EAAE,EADR;AAEE,QAAA,SAAS,EAAE,CAFb;AAGE,QAAA,KAAK,EAAE;AAAEqC,UAAAA,UAAU,EAAE;AAAd,SAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,GAOC;AAAM,QAAA,QAAQ,EAAE,KAAKpC,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,KAAK,EAAC,QAHR;AAIE,QAAA,SAAS,EAAC,mCAJZ;AAKE,QAAA,OAAO,EAAE,iBAAAE,CAAC;AAAA,iBAAI,MAAI,CAACG,KAAL,CAAWgC,mBAAX,CAA+BnC,CAA/B,CAAJ;AAAA,SALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CARJ,CADF;AAqBD;;;;EA1G2BhB,S;;AA4G9B,IAAMoD,eAAe,GAAG,SAAlBA,eAAkB,CAAAxC,KAAK;AAAA,SAAK;AAChCC,IAAAA,OAAO,EAAED,KAAK,CAACyC,WAAN,CAAkBxC,OADK;AAEhCe,IAAAA,UAAU,EAAEhB,KAAK,CAAC0C,WAAN,CAAkBC;AAFE,GAAL;AAAA,CAA7B;;AAIA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACrC,SAAO;AACLf,IAAAA,aAAa,EAAE,yBAAM;AACnB,aAAOe,QAAQ,CAAClD,mBAAmB,CAACmD,mBAApB,EAAD,CAAf;AACD,KAHI;AAILxB,IAAAA,YAAY,EAAE,wBAAM;AAClB,aAAOuB,QAAQ,CAACjD,iBAAiB,CAACmD,UAAlB,EAAD,CAAf;AACD,KANI;AAOLhB,IAAAA,qBAAqB,EAAE,iCAAM;AAC3B,aAAOc,QAAQ,CAAClD,mBAAmB,CAACqD,cAApB,EAAD,CAAf;AACD,KATI;AAULhB,IAAAA,gBAAgB,EAAE,4BAAM;AACtB,aAAOa,QAAQ,CAAChD,iBAAiB,CAACoD,aAAlB,EAAD,CAAf;AACD;AAZI,GAAP;AAcD,CAfD;;AAgBA,eAAe1D,OAAO,CAACiD,eAAD,EAAkBI,kBAAlB,CAAP,CAA6C7C,eAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport ImageCompressor from \"image-compressor.js\";\nimport { notify } from \"../../services/notify\";\nimport { connect } from \"react-redux\";\nimport { qualityValue } from \"../../helper/helper\";\nimport axios from \"axios\";\nimport CircularProgress from \"material-ui/CircularProgress\";\nimport * as actionsManageDevice from \"../../redux/inventory/actions/inventory\";\nimport * as actionsUploadFile from \"../../redux/uploadImageComp/actions/uploadImageComp\";\nimport * as actionMyDocuments from \"../../redux/myDocuments/actions/myDocument\";\nimport { format } from \"url\";\nclass UploadImageComp extends Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: false\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const { params } = this.props;\n    const file = this.props.file;\n    const fileName = this.props.fileName; //the name must be same as in backend\n    const url = this.props.url;\n\n    if (!file) {\n      return;\n    } else if (!file.type.includes(\"image\")) {\n      const formData = new FormData();\n      let isRole = this.props.loggedUser.data.role;\n\n      for (let key in params) {\n        formData.append(key, params[key]);\n      }\n      formData.delete('imageUrl');\n      formData.append(fileName, file);\n      formData.append(\"submit\", \"Upload\");\n\n      this.props.onUploadFile(formData, url,isRole);\n    } else {\n      this.setState({ loading: true });\n      let quality = qualityValue(file);\n      let imageCompressor = new ImageCompressor();\n      imageCompressor\n        .compress(file, {\n          quality: quality\n        })\n        .then(file => {\n          const formData = new FormData();\n          for (let key in params) {\n            formData.append(key, params[key]);\n          }\n          formData.delete('imageUrl'); //IMPORTANT: it is the image in ImagePreview  \n          formData.append(fileName, file, file.name);\n          formData.append(\"submit\", \"Upload\");\n          // Send the compressed image file to server with XMLHttpRequest.\n          // this.props.uploadFile(formData, url);\n          axios\n            .post(url, formData)\n            .then(data => {\n              notify(\"Success !\", `File uploaded successfully`, \"success\");\n              this.setState({ loading: false });\n              if (\n                this.props.loggedUser.data.role === \"Admin\"\n              ) {\n                this.props.onFetchDevice();\n                this.props.onFetchUnapprovedUser();\n                this.props.onGetMyDocuments();\n              }\n              else if(this.props.loggedUser.data.role === \"HR\"\n            ){\n              return;\n              // this.props.onFetchDevice();\n            }\n            else{\n              this.props.onGetMyDocuments();\n            }\n            })\n            .catch(error => {\n              if (error.request.status === 413) {\n                notify(\"Error\", \"File too large to upload\", \"error\");\n                this.setState({ loading: false });\n              }\n              else{\n                notify(\"Error\", error.request.statusText, \"error\");\n                this.setState({ loading: false });\n              }\n            });\n        });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.loading || this.state.loading ? (\n          <CircularProgress\n            size={30}\n            thickness={3}\n            style={{ marginLeft: \"50%\" }}\n          />\n        ) : (\n          <form onSubmit={this.handleSubmit}>\n            <input\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Upload\"\n              className=\"col-xs-12 md-btn md-raised indigo\"\n              onClick={e => this.props.callUpdateDocuments(e)}\n            />\n          </form>\n        )}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  loading: state.uploadImage.loading,\n  loggedUser: state.logged_user.userLogin\n});\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchDevice: () => {\n      return dispatch(actionsManageDevice.get_machines_detail());\n    },\n    onUploadFile: () => {\n      return dispatch(actionsUploadFile.uploadFile());\n    },\n    onFetchUnapprovedUser: () => {\n      return dispatch(actionsManageDevice.unapprovedUser());\n    },\n    onGetMyDocuments: () => {\n      return dispatch(actionMyDocuments.getMyDocument());\n    }\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadImageComp);\n"]},"metadata":{},"sourceType":"module"}