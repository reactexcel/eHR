{"ast":null,"code":"import _defineProperty from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _handleActions;\n\nimport { handleActions } from 'redux-actions';\nimport * as constants from '../../../redux/constants';\nimport update from 'immutability-helper';\nimport '../../../redux/update';\nvar initialState = {\n  teamStats: {\n    data: {},\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  },\n  empLifeCycle: {\n    data: {},\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  },\n  empHours: {\n    data: {},\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  },\n  monthlyHours: {\n    data: {},\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  },\n  employeePerformance: {\n    data: {},\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  },\n  employeeList: {\n    data: {},\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  },\n  monthlyAllUsersReport: {\n    data: {},\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  },\n  leastActiveEmp: {\n    data: {},\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  }\n};\n\nvar requestTeamStats = function requestTeamStats(state, action) {\n  return update(state, {\n    teamStats: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successTeamStats = function successTeamStats(state, action) {\n  return update(state, {\n    teamStats: {\n      $setRequestSuccess: action.payload\n    }\n  });\n};\n\nvar errorTeamStats = function errorTeamStats(state, action) {\n  return update(state, {\n    teamStats: {\n      $setRequestError: action.payload\n    }\n  });\n}; // empLifeCycle\n\n\nvar requestEmployeLifeCycle = function requestEmployeLifeCycle(state, action) {\n  return update(state, {\n    empLifeCycle: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successEmployeLifeCycle = function successEmployeLifeCycle(state, action) {\n  return update(state, {\n    empLifeCycle: {\n      $setRequestSuccess: action.payload\n    }\n  });\n};\n\nvar errorEmployeLifeCycle = function errorEmployeLifeCycle(state, action) {\n  return update(state, {\n    empLifeCycle: {\n      $setRequestError: action.payload\n    }\n  });\n}; // empHours\n\n\nvar requestEmployeeHours = function requestEmployeeHours(state, action) {\n  return update(state, {\n    empHours: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successEmployeeHours = function successEmployeeHours(state, action) {\n  return update(state, {\n    empHours: {\n      $setRequestSuccess: action.payload\n    }\n  });\n};\n\nvar errorEmployeeHours = function errorEmployeeHours(state, action) {\n  return update(state, {\n    empHours: {\n      $setRequestError: action.payload\n    }\n  });\n}; // employee monthly Hours\n\n\nvar requestEmployeeMonthlyHours = function requestEmployeeMonthlyHours(state, action) {\n  return update(state, {\n    monthlyHours: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successEmployeeMonthlyHours = function successEmployeeMonthlyHours(state, action) {\n  return update(state, {\n    monthlyHours: {\n      $setRequestSuccess: action.payload\n    }\n  });\n};\n\nvar errorEmployeeMonthlyHours = function errorEmployeeMonthlyHours(state, action) {\n  return update(state, {\n    monthlyHours: {\n      $setRequestError: action.payload\n    }\n  });\n}; // employee performance\n\n\nvar requestEmployeePerformance = function requestEmployeePerformance(state, action) {\n  return update(state, {\n    employeePerformance: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successEmployeePerformance = function successEmployeePerformance(state, action) {\n  return update(state, {\n    employeePerformance: {\n      $setRequestSuccess: action.payload\n    }\n  });\n};\n\nvar errorEmployeePerformance = function errorEmployeePerformance(state, action) {\n  return update(state, {\n    employeePerformance: {\n      $setRequestError: action.payload\n    }\n  });\n}; // User List\n\n\nvar requestUsersList = function requestUsersList(state, action) {\n  return update(state, {\n    employeeList: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successUsersList = function successUsersList(state, action) {\n  return update(state, {\n    employeeList: {\n      $setRequestSuccess: action.payload\n    }\n  });\n};\n\nvar errorUsersList = function errorUsersList(state, action) {\n  return update(state, {\n    employeeList: {\n      $setRequestError: action.payload\n    }\n  });\n};\n\nvar requestMonthlyReportAllUsers = function requestMonthlyReportAllUsers(state, action) {\n  return update(state, {\n    monthlyAllUsersReport: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successMonthlyReportAllUsers = function successMonthlyReportAllUsers(state, action) {\n  return update(state, {\n    monthlyAllUsersReport: {\n      $setRequestSuccess: action.payload\n    }\n  });\n};\n\nvar errorMonthlyReportAllUsers = function errorMonthlyReportAllUsers(state, action) {\n  return update(state, {\n    monthlyAllUsersReport: {\n      $setRequestError: action.payload\n    }\n  });\n};\n\nvar requestLeastActiveEmp = function requestLeastActiveEmp(state, action) {\n  return update(state, {\n    leastActiveEmp: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successLeastActiveEmp = function successLeastActiveEmp(state, action) {\n  return update(state, {\n    leastActiveEmp: {\n      $setRequestSuccess: action.payload\n    }\n  });\n};\n\nvar errorLeastActiveEmp = function errorLeastActiveEmp(state, action) {\n  return update(state, {\n    leastActiveEmp: {\n      $setRequestError: action.payload\n    }\n  });\n};\n\nexport default handleActions((_handleActions = {}, _defineProperty(_handleActions, constants.REQUEST_TEAM_STATS, requestTeamStats), _defineProperty(_handleActions, constants.SUCCESS_TEAM_STATS, successTeamStats), _defineProperty(_handleActions, constants.ERROR_TEAM_STATS, errorTeamStats), _defineProperty(_handleActions, constants.REQUEST_EMP_LIFE_CYCLE, requestEmployeLifeCycle), _defineProperty(_handleActions, constants.SUCCESS_EMP_LIFE_CYCLE, successEmployeLifeCycle), _defineProperty(_handleActions, constants.ERROR_EMP_LIFE_CYCLE, errorEmployeLifeCycle), _defineProperty(_handleActions, constants.REQUEST_EMP_HOURS, requestEmployeeHours), _defineProperty(_handleActions, constants.SUCCESS_EMP_HOURS, successEmployeeHours), _defineProperty(_handleActions, constants.ERROR_EMP_HOURS, errorEmployeeHours), _defineProperty(_handleActions, constants.REQUEST_EMP_MONTHLY_HOURS, requestEmployeeMonthlyHours), _defineProperty(_handleActions, constants.SUCCESS_EMP_MONTHLY_HOURS, successEmployeeMonthlyHours), _defineProperty(_handleActions, constants.ERROR_EMP_MONTHLY_HOURS, errorEmployeeMonthlyHours), _defineProperty(_handleActions, constants.REQUEST_EMP_PERFORMANCE, requestEmployeePerformance), _defineProperty(_handleActions, constants.SUCCESS_EMP_PERFORMANCE, successEmployeePerformance), _defineProperty(_handleActions, constants.ERROR_EMP_PERFORMANCE, errorEmployeePerformance), _defineProperty(_handleActions, constants.REQUEST_USER_LIST, requestUsersList), _defineProperty(_handleActions, constants.SUCCESS_USER_LIST, successUsersList), _defineProperty(_handleActions, constants.ERROR_USER_LIST, errorUsersList), _defineProperty(_handleActions, constants.REQUEST_MONTHLY_REPORT_ALL_USERS, requestMonthlyReportAllUsers), _defineProperty(_handleActions, constants.SUCCESS_MONTHLY_REPORT_ALL_USERS, successMonthlyReportAllUsers), _defineProperty(_handleActions, constants.ERROR_MONTHLY_REPORT_ALL_USERS, errorMonthlyReportAllUsers), _defineProperty(_handleActions, constants.REQUEST_LEAST_ACTIVE_EMP, requestLeastActiveEmp), _defineProperty(_handleActions, constants.SUCCESS_LEAST_ACTIVE_EMP, successLeastActiveEmp), _defineProperty(_handleActions, constants.ERROR_LEAST_ACTIVE_EMP, errorLeastActiveEmp), _handleActions), initialState);","map":{"version":3,"sources":["/var/www/html/ReactReduxHR/frontend/src/redux/manageUsers/reducers/dashboard.js"],"names":["handleActions","constants","update","initialState","teamStats","data","isLoading","isError","isSuccess","message","empLifeCycle","empHours","monthlyHours","employeePerformance","employeeList","monthlyAllUsersReport","leastActiveEmp","requestTeamStats","state","action","$setRequestLoading","successTeamStats","$setRequestSuccess","payload","errorTeamStats","$setRequestError","requestEmployeLifeCycle","successEmployeLifeCycle","errorEmployeLifeCycle","requestEmployeeHours","successEmployeeHours","errorEmployeeHours","requestEmployeeMonthlyHours","successEmployeeMonthlyHours","errorEmployeeMonthlyHours","requestEmployeePerformance","successEmployeePerformance","errorEmployeePerformance","requestUsersList","successUsersList","errorUsersList","requestMonthlyReportAllUsers","successMonthlyReportAllUsers","errorMonthlyReportAllUsers","requestLeastActiveEmp","successLeastActiveEmp","errorLeastActiveEmp","REQUEST_TEAM_STATS","SUCCESS_TEAM_STATS","ERROR_TEAM_STATS","REQUEST_EMP_LIFE_CYCLE","SUCCESS_EMP_LIFE_CYCLE","ERROR_EMP_LIFE_CYCLE","REQUEST_EMP_HOURS","SUCCESS_EMP_HOURS","ERROR_EMP_HOURS","REQUEST_EMP_MONTHLY_HOURS","SUCCESS_EMP_MONTHLY_HOURS","ERROR_EMP_MONTHLY_HOURS","REQUEST_EMP_PERFORMANCE","SUCCESS_EMP_PERFORMANCE","ERROR_EMP_PERFORMANCE","REQUEST_USER_LIST","SUCCESS_USER_LIST","ERROR_USER_LIST","REQUEST_MONTHLY_REPORT_ALL_USERS","SUCCESS_MONTHLY_REPORT_ALL_USERS","ERROR_MONTHLY_REPORT_ALL_USERS","REQUEST_LEAST_ACTIVE_EMP","SUCCESS_LEAST_ACTIVE_EMP","ERROR_LEAST_ACTIVE_EMP"],"mappings":";;;;AAAA,SAAQA,aAAR,QAA4B,eAA5B;AACA,OAAO,KAAKC,SAAZ,MAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAO,uBAAP;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAO,EADF;AAETC,IAAAA,SAAS,EAAE,KAFF;AAGTC,IAAAA,OAAO,EAAI,KAHF;AAITC,IAAAA,SAAS,EAAE,KAJF;AAKTC,IAAAA,OAAO,EAAI;AALF,GADM;AAQjBC,EAAAA,YAAY,EAAE;AACZL,IAAAA,IAAI,EAAO,EADC;AAEZC,IAAAA,SAAS,EAAE,KAFC;AAGZC,IAAAA,OAAO,EAAI,KAHC;AAIZC,IAAAA,SAAS,EAAE,KAJC;AAKZC,IAAAA,OAAO,EAAI;AALC,GARG;AAejBE,EAAAA,QAAQ,EAAE;AACRN,IAAAA,IAAI,EAAO,EADH;AAERC,IAAAA,SAAS,EAAE,KAFH;AAGRC,IAAAA,OAAO,EAAI,KAHH;AAIRC,IAAAA,SAAS,EAAE,KAJH;AAKRC,IAAAA,OAAO,EAAI;AALH,GAfO;AAsBjBG,EAAAA,YAAY,EAAE;AACZP,IAAAA,IAAI,EAAO,EADC;AAEZC,IAAAA,SAAS,EAAE,KAFC;AAGZC,IAAAA,OAAO,EAAI,KAHC;AAIZC,IAAAA,SAAS,EAAE,KAJC;AAKZC,IAAAA,OAAO,EAAI;AALC,GAtBG;AA6BjBI,EAAAA,mBAAmB,EAAE;AACnBR,IAAAA,IAAI,EAAO,EADQ;AAEnBC,IAAAA,SAAS,EAAE,KAFQ;AAGnBC,IAAAA,OAAO,EAAI,KAHQ;AAInBC,IAAAA,SAAS,EAAE,KAJQ;AAKnBC,IAAAA,OAAO,EAAI;AALQ,GA7BJ;AAoCjBK,EAAAA,YAAY,EAAE;AACZT,IAAAA,IAAI,EAAO,EADC;AAEZC,IAAAA,SAAS,EAAE,KAFC;AAGZC,IAAAA,OAAO,EAAI,KAHC;AAIZC,IAAAA,SAAS,EAAE,KAJC;AAKZC,IAAAA,OAAO,EAAI;AALC,GApCG;AA2CjBM,EAAAA,qBAAqB,EAAE;AACrBV,IAAAA,IAAI,EAAO,EADU;AAErBC,IAAAA,SAAS,EAAE,KAFU;AAGrBC,IAAAA,OAAO,EAAI,KAHU;AAIrBC,IAAAA,SAAS,EAAE,KAJU;AAKrBC,IAAAA,OAAO,EAAI;AALU,GA3CN;AAkDjBO,EAAAA,cAAc,EAAE;AACdX,IAAAA,IAAI,EAAO,EADG;AAEdC,IAAAA,SAAS,EAAE,KAFG;AAGdC,IAAAA,OAAO,EAAE,KAHK;AAIdC,IAAAA,SAAS,EAAE,KAJG;AAKdC,IAAAA,OAAO,EAAE;AALK;AAlDC,CAAnB;;AA2DA,IAAMQ,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAQC,MAAR;AAAA,SAAmBjB,MAAM,CAACgB,KAAD,EAAQ;AACxDd,IAAAA,SAAS,EAAE;AAACgB,MAAAA,kBAAkB,EAAE;AAArB;AAD6C,GAAR,CAAzB;AAAA,CAAzB;;AAIA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACH,KAAD,EAAQC,MAAR,EAAmB;AAC1C,SAAOjB,MAAM,CAACgB,KAAD,EAAQ;AACnBd,IAAAA,SAAS,EAAE;AAACkB,MAAAA,kBAAkB,EAAEH,MAAM,CAACI;AAA5B;AADQ,GAAR,CAAb;AAGD,CAJD;;AAMA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACN,KAAD,EAAQC,MAAR;AAAA,SAAmBjB,MAAM,CAACgB,KAAD,EAAQ;AACtDd,IAAAA,SAAS,EAAE;AAACqB,MAAAA,gBAAgB,EAAEN,MAAM,CAACI;AAA1B;AAD2C,GAAR,CAAzB;AAAA,CAAvB,C,CAIA;;;AACA,IAAMG,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACR,KAAD,EAAQC,MAAR;AAAA,SAAmBjB,MAAM,CAACgB,KAAD,EAAQ;AAC/DR,IAAAA,YAAY,EAAE;AAACU,MAAAA,kBAAkB,EAAE;AAArB;AADiD,GAAR,CAAzB;AAAA,CAAhC;;AAIA,IAAMO,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACT,KAAD,EAAQC,MAAR,EAAmB;AACjD,SAAOjB,MAAM,CAACgB,KAAD,EAAQ;AACnBR,IAAAA,YAAY,EAAE;AAACY,MAAAA,kBAAkB,EAAEH,MAAM,CAACI;AAA5B;AADK,GAAR,CAAb;AAGD,CAJD;;AAMA,IAAMK,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACV,KAAD,EAAQC,MAAR;AAAA,SAAmBjB,MAAM,CAACgB,KAAD,EAAQ;AAC7DR,IAAAA,YAAY,EAAE;AAACe,MAAAA,gBAAgB,EAAEN,MAAM,CAACI;AAA1B;AAD+C,GAAR,CAAzB;AAAA,CAA9B,C,CAIA;;;AACA,IAAMM,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACX,KAAD,EAAQC,MAAR;AAAA,SAAmBjB,MAAM,CAACgB,KAAD,EAAQ;AAC5DP,IAAAA,QAAQ,EAAE;AAACS,MAAAA,kBAAkB,EAAE;AAArB;AADkD,GAAR,CAAzB;AAAA,CAA7B;;AAGA,IAAMU,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACZ,KAAD,EAAQC,MAAR,EAAmB;AAC9C,SAAOjB,MAAM,CAACgB,KAAD,EAAQ;AACnBP,IAAAA,QAAQ,EAAE;AAACW,MAAAA,kBAAkB,EAAEH,MAAM,CAACI;AAA5B;AADS,GAAR,CAAb;AAGD,CAJD;;AAMA,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CAACb,KAAD,EAAQC,MAAR;AAAA,SAAmBjB,MAAM,CAACgB,KAAD,EAAQ;AAC1DP,IAAAA,QAAQ,EAAE;AAACc,MAAAA,gBAAgB,EAAEN,MAAM,CAACI;AAA1B;AADgD,GAAR,CAAzB;AAAA,CAA3B,C,CAGA;;;AACA,IAAMS,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACd,KAAD,EAAQC,MAAR;AAAA,SAAmBjB,MAAM,CAACgB,KAAD,EAAQ;AACnEN,IAAAA,YAAY,EAAE;AAACQ,MAAAA,kBAAkB,EAAE;AAArB;AADqD,GAAR,CAAzB;AAAA,CAApC;;AAIA,IAAMa,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACf,KAAD,EAAQC,MAAR,EAAmB;AACrD,SAAOjB,MAAM,CAACgB,KAAD,EAAQ;AACnBN,IAAAA,YAAY,EAAE;AAACU,MAAAA,kBAAkB,EAAEH,MAAM,CAACI;AAA5B;AADK,GAAR,CAAb;AAGD,CAJD;;AAMA,IAAMW,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAChB,KAAD,EAAQC,MAAR;AAAA,SAAmBjB,MAAM,CAACgB,KAAD,EAAQ;AACjEN,IAAAA,YAAY,EAAE;AAACa,MAAAA,gBAAgB,EAAEN,MAAM,CAACI;AAA1B;AADmD,GAAR,CAAzB;AAAA,CAAlC,C,CAGA;;;AACA,IAAMY,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACjB,KAAD,EAAQC,MAAR;AAAA,SAAmBjB,MAAM,CAACgB,KAAD,EAAQ;AAClEL,IAAAA,mBAAmB,EAAE;AAACO,MAAAA,kBAAkB,EAAE;AAArB;AAD6C,GAAR,CAAzB;AAAA,CAAnC;;AAIA,IAAMgB,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAClB,KAAD,EAAQC,MAAR;AAAA,SAAmBjB,MAAM,CAACgB,KAAD,EAAQ;AAClEL,IAAAA,mBAAmB,EAAE;AAACS,MAAAA,kBAAkB,EAAEH,MAAM,CAACI;AAA5B;AAD6C,GAAR,CAAzB;AAAA,CAAnC;;AAIA,IAAMc,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACnB,KAAD,EAAQC,MAAR;AAAA,SAAmBjB,MAAM,CAACgB,KAAD,EAAQ;AAChEL,IAAAA,mBAAmB,EAAE;AAACY,MAAAA,gBAAgB,EAAEN,MAAM,CAACI;AAA1B;AAD2C,GAAR,CAAzB;AAAA,CAAjC,C,CAGA;;;AACA,IAAMe,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACpB,KAAD,EAAQC,MAAR;AAAA,SAAmBjB,MAAM,CAACgB,KAAD,EAAQ;AACxDJ,IAAAA,YAAY,EAAE;AAACM,MAAAA,kBAAkB,EAAE;AAArB;AAD0C,GAAR,CAAzB;AAAA,CAAzB;;AAIA,IAAMmB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACrB,KAAD,EAAQC,MAAR,EAAmB;AAC1C,SAAOjB,MAAM,CAACgB,KAAD,EAAQ;AACnBJ,IAAAA,YAAY,EAAE;AAACQ,MAAAA,kBAAkB,EAAEH,MAAM,CAACI;AAA5B;AADK,GAAR,CAAb;AAGD,CAJD;;AAMA,IAAMiB,cAAc,GAAG,SAAjBA,cAAiB,CAACtB,KAAD,EAAQC,MAAR;AAAA,SAAmBjB,MAAM,CAACgB,KAAD,EAAQ;AACtDJ,IAAAA,YAAY,EAAE;AAACW,MAAAA,gBAAgB,EAAEN,MAAM,CAACI;AAA1B;AADwC,GAAR,CAAzB;AAAA,CAAvB;;AAIA,IAAMkB,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACvB,KAAD,EAAQC,MAAR;AAAA,SAAmBjB,MAAM,CAACgB,KAAD,EAAQ;AACpEH,IAAAA,qBAAqB,EAAE;AAACK,MAAAA,kBAAkB,EAAE;AAArB;AAD6C,GAAR,CAAzB;AAAA,CAArC;;AAIA,IAAMsB,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACxB,KAAD,EAAQC,MAAR,EAAmB;AACtD,SAAOjB,MAAM,CAACgB,KAAD,EAAQ;AACnBH,IAAAA,qBAAqB,EAAE;AAACO,MAAAA,kBAAkB,EAAEH,MAAM,CAACI;AAA5B;AADJ,GAAR,CAAb;AAGD,CAJD;;AAMA,IAAMoB,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACzB,KAAD,EAAQC,MAAR;AAAA,SAAmBjB,MAAM,CAACgB,KAAD,EAAQ;AAClEH,IAAAA,qBAAqB,EAAE;AAACU,MAAAA,gBAAgB,EAAEN,MAAM,CAACI;AAA1B;AAD2C,GAAR,CAAzB;AAAA,CAAnC;;AAIA,IAAMqB,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAC1B,KAAD,EAAQC,MAAR;AAAA,SAAmBjB,MAAM,CAACgB,KAAD,EAAQ;AAC7DF,IAAAA,cAAc,EAAE;AAAEI,MAAAA,kBAAkB,EAAE;AAAtB;AAD6C,GAAR,CAAzB;AAAA,CAA9B;;AAIA,IAAMyB,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAC3B,KAAD,EAAQC,MAAR;AAAA,SAAmBjB,MAAM,CAACgB,KAAD,EAAQ;AAC7DF,IAAAA,cAAc,EAAE;AAAEM,MAAAA,kBAAkB,EAAEH,MAAM,CAACI;AAA7B;AAD6C,GAAR,CAAzB;AAAA,CAA9B;;AAIA,IAAMuB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAC5B,KAAD,EAAQC,MAAR;AAAA,SAAmBjB,MAAM,CAACgB,KAAD,EAAQ;AAC3DF,IAAAA,cAAc,EAAE;AAAES,MAAAA,gBAAgB,EAAEN,MAAM,CAACI;AAA3B;AAD2C,GAAR,CAAzB;AAAA,CAA5B;;AAIA,eAAevB,aAAa,uDACzBC,SAAS,CAAC8C,kBADe,EACM9B,gBADN,mCAEzBhB,SAAS,CAAC+C,kBAFe,EAEM3B,gBAFN,mCAGzBpB,SAAS,CAACgD,gBAHe,EAGMzB,cAHN,mCAKzBvB,SAAS,CAACiD,sBALe,EAKUxB,uBALV,mCAMzBzB,SAAS,CAACkD,sBANe,EAMUxB,uBANV,mCAOzB1B,SAAS,CAACmD,oBAPe,EAOUxB,qBAPV,mCASzB3B,SAAS,CAACoD,iBATe,EASKxB,oBATL,mCAUzB5B,SAAS,CAACqD,iBAVe,EAUKxB,oBAVL,mCAWzB7B,SAAS,CAACsD,eAXe,EAWKxB,kBAXL,mCAazB9B,SAAS,CAACuD,yBAbe,EAaaxB,2BAbb,mCAczB/B,SAAS,CAACwD,yBAde,EAcaxB,2BAdb,mCAezBhC,SAAS,CAACyD,uBAfe,EAeaxB,yBAfb,mCAiBzBjC,SAAS,CAAC0D,uBAjBe,EAiBWxB,0BAjBX,mCAkBzBlC,SAAS,CAAC2D,uBAlBe,EAkBWxB,0BAlBX,mCAmBzBnC,SAAS,CAAC4D,qBAnBe,EAmBWxB,wBAnBX,mCAqBzBpC,SAAS,CAAC6D,iBArBe,EAqBKxB,gBArBL,mCAsBzBrC,SAAS,CAAC8D,iBAtBe,EAsBKxB,gBAtBL,mCAuBzBtC,SAAS,CAAC+D,eAvBe,EAuBKxB,cAvBL,mCAyBzBvC,SAAS,CAACgE,gCAzBe,EAyBoBxB,4BAzBpB,mCA0BzBxC,SAAS,CAACiE,gCA1Be,EA0BoBxB,4BA1BpB,mCA2BzBzC,SAAS,CAACkE,8BA3Be,EA2BkBxB,0BA3BlB,mCA6BzB1C,SAAS,CAACmE,wBA7Be,EA6BYxB,qBA7BZ,mCA8BzB3C,SAAS,CAACoE,wBA9Be,EA8BYxB,qBA9BZ,mCA+BzB5C,SAAS,CAACqE,sBA/Be,EA+BUxB,mBA/BV,oBAiCzB3C,YAjCyB,CAA5B","sourcesContent":["import {handleActions} from 'redux-actions';\nimport * as constants from '../../../redux/constants';\nimport update from 'immutability-helper';\nimport '../../../redux/update';\n\nlet initialState = {\n  teamStats: {\n    data:      {},\n    isLoading: false,\n    isError:   false,\n    isSuccess: false,\n    message:   ''\n  },\n  empLifeCycle: {\n    data:      {},\n    isLoading: false,\n    isError:   false,\n    isSuccess: false,\n    message:   ''\n  },\n  empHours: {\n    data:      {},\n    isLoading: false,\n    isError:   false,\n    isSuccess: false,\n    message:   ''\n  },\n  monthlyHours: {\n    data:      {},\n    isLoading: false,\n    isError:   false,\n    isSuccess: false,\n    message:   ''\n  },\n  employeePerformance: {\n    data:      {},\n    isLoading: false,\n    isError:   false,\n    isSuccess: false,\n    message:   ''\n  },\n  employeeList: {\n    data:      {},\n    isLoading: false,\n    isError:   false,\n    isSuccess: false,\n    message:   ''\n  },\n  monthlyAllUsersReport: {\n    data:      {},\n    isLoading: false,\n    isError:   false,\n    isSuccess: false,\n    message:   ''\n  },\n  leastActiveEmp: {\n    data:      {},\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  }\n};\n\nconst requestTeamStats = (state, action) => update(state, {\n  teamStats: {$setRequestLoading: null}\n});\n\nconst successTeamStats = (state, action) => {\n  return update(state, {\n    teamStats: {$setRequestSuccess: action.payload}\n  });\n};\n\nconst errorTeamStats = (state, action) => update(state, {\n  teamStats: {$setRequestError: action.payload}\n});\n\n// empLifeCycle\nconst requestEmployeLifeCycle = (state, action) => update(state, {\n  empLifeCycle: {$setRequestLoading: null}\n});\n\nconst successEmployeLifeCycle = (state, action) => {\n  return update(state, {\n    empLifeCycle: {$setRequestSuccess: action.payload}\n  });\n};\n\nconst errorEmployeLifeCycle = (state, action) => update(state, {\n  empLifeCycle: {$setRequestError: action.payload}\n});\n\n// empHours\nconst requestEmployeeHours = (state, action) => update(state, {\n  empHours: {$setRequestLoading: null}\n});\nconst successEmployeeHours = (state, action) => {\n  return update(state, {\n    empHours: {$setRequestSuccess: action.payload}\n  });\n};\n\nconst errorEmployeeHours = (state, action) => update(state, {\n  empHours: {$setRequestError: action.payload}\n});\n// employee monthly Hours\nconst requestEmployeeMonthlyHours = (state, action) => update(state, {\n  monthlyHours: {$setRequestLoading: null}\n});\n\nconst successEmployeeMonthlyHours = (state, action) => {\n  return update(state, {\n    monthlyHours: {$setRequestSuccess: action.payload}\n  });\n};\n\nconst errorEmployeeMonthlyHours = (state, action) => update(state, {\n  monthlyHours: {$setRequestError: action.payload}\n});\n// employee performance\nconst requestEmployeePerformance = (state, action) => update(state, {\n  employeePerformance: {$setRequestLoading: null}\n});\n\nconst successEmployeePerformance = (state, action) => update(state, {\n  employeePerformance: {$setRequestSuccess: action.payload}\n});\n\nconst errorEmployeePerformance = (state, action) => update(state, {\n  employeePerformance: {$setRequestError: action.payload}\n});\n// User List\nconst requestUsersList = (state, action) => update(state, {\n  employeeList: {$setRequestLoading: null}\n});\n\nconst successUsersList = (state, action) => {\n  return update(state, {\n    employeeList: {$setRequestSuccess: action.payload}\n  });\n};\n\nconst errorUsersList = (state, action) => update(state, {\n  employeeList: {$setRequestError: action.payload}\n});\n\nconst requestMonthlyReportAllUsers = (state, action) => update(state, {\n  monthlyAllUsersReport: {$setRequestLoading: null}\n});\n\nconst successMonthlyReportAllUsers = (state, action) => {\n  return update(state, {\n    monthlyAllUsersReport: {$setRequestSuccess: action.payload}\n  });\n};\n\nconst errorMonthlyReportAllUsers = (state, action) => update(state, {\n  monthlyAllUsersReport: {$setRequestError: action.payload}\n});\n\nconst requestLeastActiveEmp = (state, action) => update(state, {\n  leastActiveEmp: { $setRequestLoading: null }\n}); \n\nconst successLeastActiveEmp = (state, action) => update(state, {\n  leastActiveEmp: { $setRequestSuccess: action.payload }\n}); \n\nconst errorLeastActiveEmp = (state, action) => update(state, {\n  leastActiveEmp: { $setRequestError: action.payload }\n});\n\nexport default handleActions({\n  [constants.REQUEST_TEAM_STATS]: requestTeamStats,\n  [constants.SUCCESS_TEAM_STATS]: successTeamStats,\n  [constants.ERROR_TEAM_STATS]:   errorTeamStats,\n\n  [constants.REQUEST_EMP_LIFE_CYCLE]: requestEmployeLifeCycle,\n  [constants.SUCCESS_EMP_LIFE_CYCLE]: successEmployeLifeCycle,\n  [constants.ERROR_EMP_LIFE_CYCLE]:   errorEmployeLifeCycle,\n\n  [constants.REQUEST_EMP_HOURS]: requestEmployeeHours,\n  [constants.SUCCESS_EMP_HOURS]: successEmployeeHours,\n  [constants.ERROR_EMP_HOURS]:   errorEmployeeHours,\n\n  [constants.REQUEST_EMP_MONTHLY_HOURS]: requestEmployeeMonthlyHours,\n  [constants.SUCCESS_EMP_MONTHLY_HOURS]: successEmployeeMonthlyHours,\n  [constants.ERROR_EMP_MONTHLY_HOURS]:   errorEmployeeMonthlyHours,\n\n  [constants.REQUEST_EMP_PERFORMANCE]: requestEmployeePerformance,\n  [constants.SUCCESS_EMP_PERFORMANCE]: successEmployeePerformance,\n  [constants.ERROR_EMP_PERFORMANCE]:   errorEmployeePerformance,\n\n  [constants.REQUEST_USER_LIST]: requestUsersList,\n  [constants.SUCCESS_USER_LIST]: successUsersList,\n  [constants.ERROR_USER_LIST]:   errorUsersList,\n\n  [constants.REQUEST_MONTHLY_REPORT_ALL_USERS]: requestMonthlyReportAllUsers,\n  [constants.SUCCESS_MONTHLY_REPORT_ALL_USERS]: successMonthlyReportAllUsers,\n  [constants.ERROR_MONTHLY_REPORT_ALL_USERS]: errorMonthlyReportAllUsers,\n\n  [constants.REQUEST_LEAST_ACTIVE_EMP]: requestLeastActiveEmp,\n  [constants.SUCCESS_LEAST_ACTIVE_EMP]: successLeastActiveEmp,\n  [constants.ERROR_LEAST_ACTIVE_EMP]: errorLeastActiveEmp\n\n}, initialState);\n"]},"metadata":{},"sourceType":"module"}