{"ast":null,"code":"import _classCallCheck from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/var/www/html/ReactReduxHR/frontend/src/modules/manageUsers/components/PageEmployeePerformance.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { withRouter } from 'react-router';\nimport _ from 'lodash';\nimport * as actions from '../../../redux/actions';\nimport { HighchartsChart, AreaSplineSeries, Chart, XAxis, Tooltip, YAxis, Title, Subtitle, Legend, ColumnSeries, SplineSeries, PieSeries } from 'react-jsx-highcharts'; // import 'react-date-picker/index.css';\n\nvar moment = require('moment');\n\nvar PageEmployeePerformance =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PageEmployeePerformance, _Component);\n\n  function PageEmployeePerformance(props) {\n    var _this;\n\n    _classCallCheck(this, PageEmployeePerformance);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PageEmployeePerformance).call(this, props));\n    _this.state = {\n      search: '',\n      start_year: '',\n      end_year: '',\n      pendingData: '',\n      year: '',\n      month: '',\n      userId: '',\n      employeePerformance: ''\n    };\n    _this.getByData = _this.getByData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleMonth = _this.handleMonth.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleYear = _this.handleYear.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(PageEmployeePerformance, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        year: this.props.currentYear,\n        month: this.props.currentMonth,\n        employeePerformance: this.props.employeePerformance\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      this.setState({\n        employeePerformance: props.employeePerformance\n      });\n    }\n  }, {\n    key: \"handleMonth\",\n    value: function handleMonth(data) {\n      this.setState({\n        month: data\n      });\n      this.getByData({\n        month: data,\n        change: 'month'\n      });\n    }\n  }, {\n    key: \"handleYear\",\n    value: function handleYear(data) {\n      this.setState({\n        year: data\n      });\n      this.getByData({\n        year: data,\n        change: 'year'\n      });\n    }\n  }, {\n    key: \"getByData\",\n    value: function getByData(data) {\n      var userId = localStorage.getItem('userid');\n      var year = this.state.year !== '' ? this.state.year : this.props.currentYear;\n      var month = this.state.month !== '' ? this.state.month : this.props.currentMonth;\n\n      if (data.change === 'month') {\n        month = data.month;\n      } else if (data.change === 'year') {\n        year = data.year;\n      }\n\n      this.props.requestEmployeePerformance({\n        'month': month,\n        'year': year\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var EmpPerformance = this.state.employeePerformance;\n      var noOfDays = [];\n      var noOfActiveHours = [];\n      var noOfTotalHours = [];\n      var monthOptions = [];\n      var yearOptions = [];\n\n      var monthOption = _.map(this.props.months, function (monthData, i) {\n        monthOptions.push(React.createElement(\"option\", {\n          key: i,\n          value: monthData,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, monthData));\n      });\n\n      var yearOption = _.map(this.props.year, function (data, i) {\n        return yearOptions.push(React.createElement(\"option\", {\n          key: i,\n          value: data,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, data));\n      });\n\n      if (EmpPerformance !== undefined && EmpPerformance.isSuccess) {\n        var performanceData = EmpPerformance.data;\n\n        var timeList = _.map(EmpPerformance.data, function (performanceData, j) {\n          var date = _this2.props.currentDate.toString().split(\" \");\n\n          noOfDays.push(performanceData.day);\n          var thedate = performanceData.day.split(\" \");\n          var dateData = thedate[0].toString().length > 1 ? thedate[0] : '0' + thedate[0];\n\n          if (_this2.state.year === _this2.props.currentYear && _this2.state.month === _this2.props.currentMonth && dateData <= date[2]) {\n            if (parseFloat(performanceData.top_active_hrs.hours) > 0.0) {\n              noOfActiveHours.push({\n                y: parseFloat(performanceData.top_active_hrs.hours),\n                nameData: performanceData.top_active_hrs.username\n              });\n            } else if (parseFloat(performanceData.top_active_hrs.hours) === 0.0) {\n              noOfActiveHours.push({\n                y: parseFloat(performanceData.top_active_hrs.hours),\n                nameData: \"\"\n              });\n            }\n\n            if (parseFloat(performanceData.top_total_hrs.hours) > 0.0) {\n              noOfTotalHours.push({\n                y: parseFloat(performanceData.top_total_hrs.hours),\n                nameData: performanceData.top_total_hrs.username\n              });\n            } else if (parseFloat(performanceData.top_total_hrs.hours) === 0.0) {\n              noOfTotalHours.push({\n                y: parseFloat(performanceData.top_total_hrs.hours),\n                nameData: \"\"\n              });\n            }\n          } else if (_this2.state.year !== _this2.props.currentYear || _this2.state.month !== _this2.props.currentMonth) {\n            if (parseFloat(performanceData.top_active_hrs.hours) > 0.0) {\n              noOfActiveHours.push({\n                y: parseFloat(performanceData.top_active_hrs.hours),\n                nameData: performanceData.top_active_hrs.username\n              });\n            } else if (parseFloat(performanceData.top_active_hrs.hours) === 0.0) {\n              noOfActiveHours.push({\n                y: parseFloat(performanceData.top_active_hrs.hours),\n                nameData: \"\"\n              });\n            }\n\n            if (parseFloat(performanceData.top_total_hrs.hours) > 0.0) {\n              noOfTotalHours.push({\n                y: parseFloat(performanceData.top_total_hrs.hours),\n                nameData: performanceData.top_total_hrs.username\n              });\n            } else if (parseFloat(performanceData.top_total_hrs.hours) === 0.0) {\n              noOfTotalHours.push({\n                y: parseFloat(performanceData.top_total_hrs.hours),\n                nameData: \"\"\n              });\n            }\n          }\n\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111\n            },\n            __self: this\n          });\n        });\n      }\n\n      var plotOptions = {\n        spline: {\n          dataLabels: {\n            enabled: true,\n            format: '{point.nameData} <br/> {point.y} hrs'\n          }\n        }\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row p-a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"well p-a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(HighchartsChart, {\n        plotOptions: plotOptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        backgroundColor: null,\n        style: {\n          'fontFamily': 'Dosis, sans-serif'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(Title, {\n        style: {\n          'fontSize': '16px',\n          'fontWeight': 'bold',\n          'textTransform': 'uppercase'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, 'Employee Monthly Performance'), React.createElement(Subtitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, 'Active of Employee'), React.createElement(Legend, {\n        itemStyle: {\n          'fontWeight': 'bold',\n          'fontSize': '13px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        backgroundColor: 'rgba(219,219,216,0.8)',\n        shadow: false,\n        borderWidth: 0,\n        pointFormat: \"<span style=\\\"color:{point.color}\\\">\\u25CF</span> {series.name}:<br/>Name: <b>{point.nameData}</b><br/>Hours: <b>{point.y:.1f}</b><br/>\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), React.createElement(XAxis, {\n        id: \"x\",\n        categories: noOfDays,\n        title: {\n          'style': {\n            'textTransform': 'uppercase'\n          }\n        },\n        gridLineWidth: 1,\n        labels: {\n          'style': {\n            'fontSize': '12px'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(XAxis.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Days\")), React.createElement(YAxis, {\n        id: \"EmpPerformance\",\n        title: {\n          'style': {\n            'textTransform': 'uppercase'\n          }\n        },\n        labels: {\n          'style': {\n            'fontSize': '12px'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(YAxis.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"No. of Hours\"), React.createElement(SplineSeries, {\n        id: \"emp\",\n        name: \"Active Hours\",\n        data: noOfActiveHours,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"well p-a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(HighchartsChart, {\n        plotOptions: plotOptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        backgroundColor: null,\n        style: {\n          'fontFamily': 'Dosis, sans-serif'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), React.createElement(Title, {\n        style: {\n          'fontSize': '16px',\n          'fontWeight': 'bold',\n          'textTransform': 'uppercase'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, 'Employee Monthly Performance'), React.createElement(Subtitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, 'Active of Employee'), React.createElement(Legend, {\n        itemStyle: {\n          'fontWeight': 'bold',\n          'fontSize': '13px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        backgroundColor: 'rgba(219,219,216,0.8)',\n        shadow: false,\n        borderWidth: 0,\n        pointFormat: \"<span style=\\\"color:{point.color}\\\">\\u25CF</span> {series.name}:<br/>Name: <b>{point.nameData}</b><br/>Hours: <b>{point.y:.1f}</b><br/>\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }), React.createElement(XAxis, {\n        id: \"x\",\n        categories: noOfDays,\n        title: {\n          'style': {\n            'textTransform': 'uppercase'\n          }\n        },\n        gridLineWidth: 1,\n        labels: {\n          'style': {\n            'fontSize': '12px'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(XAxis.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Days\")), React.createElement(YAxis, {\n        id: \"EmpPerformance\",\n        title: {\n          'style': {\n            'textTransform': 'uppercase'\n          }\n        },\n        labels: {\n          'style': {\n            'fontSize': '12px'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(YAxis.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"No. of Hours\"), React.createElement(SplineSeries, {\n        id: \"emp2\",\n        name: \"Total Hours\",\n        data: noOfTotalHours,\n        color: 'black',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        className: \"container p-t \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group col-xs-6 profile-input p-a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"sel1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Select Month:\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"sel1\",\n        defaultValue: this.props.currentMonth,\n        onChange: function onChange(evt) {\n          _this2.handleMonth(evt.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, monthOptions)), React.createElement(\"div\", {\n        className: \"form-group col-xs-6 profile-input p-a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"sel1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"Select Year:\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"sel12\",\n        defaultValue: this.props.currentYear,\n        onChange: function onChange(evt) {\n          _this2.handleYear(evt.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, yearOptions)))));\n    }\n  }]);\n\n  return PageEmployeePerformance;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    frontend: state.frontend.toJS(),\n    loggedUser: state.logged_user.userLogin,\n    usersList: state.usersList.toJS(),\n    teamStats: state.teamStats,\n    empLifeCycle: state.teamStats.empLifeCycle,\n    empHours: state.teamStats.empHours,\n    monthlyHours: state.teamStats.monthlyHours,\n    empPerformance: state.teamStats.employeePerformance\n  };\n}\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators(actions, dispatch);\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(PageEmployeePerformance));","map":{"version":3,"sources":["/var/www/html/ReactReduxHR/frontend/src/modules/manageUsers/components/PageEmployeePerformance.jsx"],"names":["React","Component","connect","bindActionCreators","withRouter","_","actions","HighchartsChart","AreaSplineSeries","Chart","XAxis","Tooltip","YAxis","Title","Subtitle","Legend","ColumnSeries","SplineSeries","PieSeries","moment","require","PageEmployeePerformance","props","state","search","start_year","end_year","pendingData","year","month","userId","employeePerformance","getByData","bind","handleMonth","handleYear","setState","currentYear","currentMonth","data","change","localStorage","getItem","requestEmployeePerformance","EmpPerformance","noOfDays","noOfActiveHours","noOfTotalHours","monthOptions","yearOptions","monthOption","map","months","monthData","i","push","yearOption","undefined","isSuccess","performanceData","timeList","j","date","currentDate","toString","split","day","thedate","dateData","length","parseFloat","top_active_hrs","hours","y","nameData","username","top_total_hrs","plotOptions","spline","dataLabels","enabled","format","evt","target","value","mapStateToProps","frontend","toJS","loggedUser","logged_user","userLogin","usersList","teamStats","empLifeCycle","empHours","monthlyHours","empPerformance","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {withRouter} from 'react-router';\nimport _ from 'lodash';\nimport * as actions from '../../../redux/actions';\nimport {HighchartsChart, AreaSplineSeries, Chart, XAxis, Tooltip, YAxis, Title, Subtitle, Legend, ColumnSeries, SplineSeries, PieSeries} from 'react-jsx-highcharts';\n// import 'react-date-picker/index.css';\nvar moment = require('moment');\n\nclass PageEmployeePerformance extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      search:              '',\n      start_year:          '',\n      end_year:            '',\n      pendingData:         '',\n      year:                '',\n      month:               '',\n      userId:              '',\n      employeePerformance: ''\n    };\n    this.getByData = this.getByData.bind(this);\n    this.handleMonth = this.handleMonth.bind(this);\n    this.handleYear = this.handleYear.bind(this);\n  }\n  componentWillMount () {\n    this.setState({\n      year:this.props.currentYear,\n      month:this.props.currentMonth,\n      employeePerformance: this.props.employeePerformance\n    });\n  }\n  componentWillReceiveProps (props) {\n    this.setState({\n      employeePerformance: props.employeePerformance\n    });\n  }\n\n  handleMonth(data){\n    this.setState({month:data});\n    this.getByData({month:data, change: 'month' });\n  }\n\n  handleYear(data){\n    this.setState({ year: data});\n    this.getByData({ year: data, change: 'year' });\n  }\n\n  getByData (data) {\n    const userId = localStorage.getItem('userid');\n    let year = this.state.year !== '' ? this.state.year : this.props.currentYear;\n    let month = this.state.month !== '' ? this.state.month : this.props.currentMonth;\n    if(data.change === 'month'){\n      month=data.month;\n    }else if (data.change === 'year') {\n      year=data.year;\n    }\n    this.props.requestEmployeePerformance({\n      'month': month,\n      'year':  year\n    });\n  }\n  render () {\n    let EmpPerformance = this.state.employeePerformance;\n    var noOfDays = [];\n    var noOfActiveHours = [];\n    var noOfTotalHours = [];\n    let monthOptions = [];\n    let yearOptions = [];\n    let monthOption = _.map(this.props.months, (monthData, i) => {\n      monthOptions.push(<option key={i} value={monthData}>{monthData}</option>);\n    });\n    let yearOption = _.map(this.props.year, (data, i) => {\n      return (\n      yearOptions.push(<option key={i} value={data}>{data}</option>)\n      );\n    });\n    if (EmpPerformance !== undefined && EmpPerformance.isSuccess) {\n      let performanceData = EmpPerformance.data;\n      let timeList = _.map(EmpPerformance.data, (performanceData, j) => {\n        let date= this.props.currentDate.toString().split(\" \");\n        noOfDays.push(performanceData.day);\n        let thedate=performanceData.day.split(\" \");\n        let dateData = thedate[0].toString().length > 1 ? thedate[0]: '0' + thedate[0];\n        if(this.state.year === this.props.currentYear && this.state.month === this.props.currentMonth && dateData <= date[2]  ){\n            if(parseFloat(performanceData.top_active_hrs.hours) > 0.0 ){\n              noOfActiveHours.push({y:parseFloat(performanceData.top_active_hrs.hours),nameData:performanceData.top_active_hrs.username});\n            }else if(parseFloat(performanceData.top_active_hrs.hours) === 0.0){\n              noOfActiveHours.push({y:parseFloat(performanceData.top_active_hrs.hours),nameData:\"\"});\n            }\n            if (parseFloat(performanceData.top_total_hrs.hours) > 0.0) {\n             noOfTotalHours.push({y:parseFloat(performanceData.top_total_hrs.hours),nameData:performanceData.top_total_hrs.username});\n           } else if ( parseFloat(performanceData.top_total_hrs.hours) === 0.0) {\n              noOfTotalHours.push({y:parseFloat(performanceData.top_total_hrs.hours),nameData:\"\"});\n            }\n          }else if( this.state.year !== this.props.currentYear || this.state.month !== this.props.currentMonth){\n            if(parseFloat(performanceData.top_active_hrs.hours) > 0.0 ){\n              noOfActiveHours.push({y:parseFloat(performanceData.top_active_hrs.hours),nameData:performanceData.top_active_hrs.username});\n            }else if(parseFloat(performanceData.top_active_hrs.hours) === 0.0){\n              noOfActiveHours.push({y:parseFloat(performanceData.top_active_hrs.hours),nameData:\"\"});\n            }\n            if (parseFloat(performanceData.top_total_hrs.hours) > 0.0) {\n             noOfTotalHours.push({y:parseFloat(performanceData.top_total_hrs.hours),nameData:performanceData.top_total_hrs.username});\n           } else if ( parseFloat(performanceData.top_total_hrs.hours) === 0.0) {\n              noOfTotalHours.push({y:parseFloat(performanceData.top_total_hrs.hours),nameData:\"\"});\n            }\n        }\n        return (\n          <div></div>\n        );\n      });\n    }\n    const plotOptions= {\n        spline: {\n            dataLabels: {\n                enabled: true,\n                format: '{point.nameData} <br/> {point.y} hrs'\n            },\n        }\n    };\n    return (\n      <div>\n        <div className=\"row p-a\">\n          <div className=\"well p-a\">\n            <HighchartsChart plotOptions={plotOptions} >\n              <Chart backgroundColor={null} style={{'fontFamily': 'Dosis, sans-serif'}} />\n              <Title style={{'fontSize': '16px', 'fontWeight': 'bold', 'textTransform': 'uppercase'}}>{'Employee Monthly Performance'}</Title>\n              <Subtitle>{'Active of Employee'}</Subtitle>\n              <Legend itemStyle={{'fontWeight': 'bold', 'fontSize': '13px'}} />\n              <Tooltip backgroundColor={'rgba(219,219,216,0.8)'} shadow={false} borderWidth={0}\n                pointFormat={  '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}:<br/>Name: <b>{point.nameData}</b><br/>Hours: <b>{point.y:.1f}</b><br/>'\n                }\n              />\n              <XAxis id=\"x\" categories={noOfDays} title={{'style': {'textTransform': 'uppercase'}}} gridLineWidth={1} labels={{'style': {'fontSize': '12px'}}} >\n                <XAxis.Title>Days</XAxis.Title>\n              </XAxis>\n              <YAxis id='EmpPerformance' title={{'style': {'textTransform': 'uppercase'}}}  labels={{'style': {'fontSize': '12px'}}} >\n                <YAxis.Title>No. of Hours</YAxis.Title>\n                <SplineSeries id=\"emp\" name=\"Active Hours\"  data={noOfActiveHours}  />\n                {/* <SplineSeries id=\"emp2\" name=\"Total Hours\" data={noOfTotalHours} color={'black'} /> */}\n              </YAxis>\n            </HighchartsChart>\n          </div>\n          <div className=\"well p-a\">\n            <HighchartsChart plotOptions={plotOptions} >\n              <Chart backgroundColor={null} style={{'fontFamily': 'Dosis, sans-serif'}} />\n              <Title style={{'fontSize': '16px', 'fontWeight': 'bold', 'textTransform': 'uppercase'}}>{'Employee Monthly Performance'}</Title>\n              <Subtitle>{'Active of Employee'}</Subtitle>\n              <Legend itemStyle={{'fontWeight': 'bold', 'fontSize': '13px'}} />\n              <Tooltip backgroundColor={'rgba(219,219,216,0.8)'} shadow={false} borderWidth={0}\n                pointFormat={  '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}:<br/>Name: <b>{point.nameData}</b><br/>Hours: <b>{point.y:.1f}</b><br/>'\n                }\n              />\n              <XAxis id=\"x\" categories={noOfDays} title={{'style': {'textTransform': 'uppercase'}}} gridLineWidth={1} labels={{'style': {'fontSize': '12px'}}} >\n                <XAxis.Title>Days</XAxis.Title>\n              </XAxis>\n              <YAxis id='EmpPerformance' title={{'style': {'textTransform': 'uppercase'}}}  labels={{'style': {'fontSize': '12px'}}} >\n                <YAxis.Title>No. of Hours</YAxis.Title>\n                {/* <SplineSeries id=\"emp\" name=\"Active Hours\"  data={noOfActiveHours}  /> */}\n                <SplineSeries id=\"emp2\" name=\"Total Hours\" data={noOfTotalHours} color={'black'} />\n              </YAxis>\n            </HighchartsChart>\n          </div>\n        </div>\n        <div className=\"container p-t \">\n          <div className=\"row\">\n            <div className=\"form-group col-xs-6 profile-input p-a\">\n              <label htmlFor=\"sel1\">Select Month:</label>\n              <select className=\"form-control\" id=\"sel1\" defaultValue={this.props.currentMonth}\n                onChange={(evt) => { this.handleMonth(evt.target.value); }}>\n                {monthOptions}\n              </select>\n            </div>\n            <div className=\"form-group col-xs-6 profile-input p-a\">\n              <label htmlFor=\"sel1\">Select Year:</label>\n              <select className=\"form-control\" id=\"sel12\" defaultValue={this.props.currentYear}\n                onChange={(evt) => { this.handleYear(evt.target.value); }}>\n                {yearOptions}\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps (state) {\n  return {\n    frontend:       state.frontend.toJS(),\n    loggedUser:     state.logged_user.userLogin,\n    usersList:      state.usersList.toJS(),\n    teamStats:      state.teamStats,\n    empLifeCycle:   state.teamStats.empLifeCycle,\n    empHours:       state.teamStats.empHours,\n    monthlyHours:   state.teamStats.monthlyHours,\n    empPerformance: state.teamStats.employeePerformance\n  };\n}\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(actions, dispatch);\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(PageEmployeePerformance));\n"]},"metadata":{},"sourceType":"module"}