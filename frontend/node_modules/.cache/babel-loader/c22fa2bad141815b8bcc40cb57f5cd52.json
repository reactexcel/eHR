{"ast":null,"code":"import _defineProperty from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _handleActions;\n\nimport { handleActions } from 'redux-actions';\nimport update from 'immutability-helper';\nimport * as constants from '../../../redux/constants';\nimport '../../../redux/update';\nvar initialState = {\n  attendanceUploadSetting: {\n    data: [],\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: \"\"\n  },\n  addAttendanceUploadSetting: {\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: \"\"\n  },\n  deleteAttendanceUploadSetting: {\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: \"\"\n  },\n  resetPasswordStatus: {\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: \"\",\n    data: {}\n  }\n};\n\nvar requestAttendanceUploadSetting = function requestAttendanceUploadSetting(state, action) {\n  return update(state, {\n    attendanceUploadSetting: {\n      isLoading: {\n        $set: true\n      },\n      isError: {\n        $set: false\n      },\n      isSuccess: {\n        $set: false\n      },\n      message: {\n        $set: \"\"\n      }\n    }\n  });\n};\n\nvar successGetAttendanceUploadSetting = function successGetAttendanceUploadSetting(state, action) {\n  return update(state, {\n    attendanceUploadSetting: {\n      data: {\n        $set: action.payload\n      },\n      isLoading: {\n        $set: false\n      },\n      isError: {\n        $set: false\n      },\n      isSuccess: {\n        $set: true\n      },\n      message: {\n        $set: \"\"\n      }\n    }\n  });\n};\n\nvar errorAttendanceUploadSetting = function errorAttendanceUploadSetting(state, action) {\n  return update(state, {\n    attendanceUploadSetting: {\n      isLoading: {\n        $set: false\n      },\n      isError: {\n        $set: true\n      },\n      isSuccess: {\n        $set: false\n      },\n      message: {\n        $set: action.payload\n      }\n    }\n  });\n}; // const requestAddAttendanceUploadSetting = (state, action) => update(state, {\n//   addAttendanceUploadSetting: {\n//     isLoading: {$set: true},\n//     isError:   {$set: false},\n//     isSuccess: {$set: false},\n//     message:   {$set: ''}\n//   }\n// });\n\n\nvar successAttendanceUploadSettingActions = function successAttendanceUploadSettingActions(state, action) {\n  return update(state, {\n    addAttendanceUploadSetting: {\n      isLoading: {\n        $set: false\n      },\n      isError: {\n        $set: false\n      },\n      isSuccess: {\n        $set: true\n      },\n      message: {\n        $set: \"\"\n      }\n    }\n  });\n}; // const errorAddAttendanceUploadSetting = (state, action) => update(state, {\n//   addAttendanceUploadSetting: {\n//     isLoading: {$set: false},\n//     isError:   {$set: true},\n//     isSuccess: {$set: false},\n//     message:   {$set: 'Error !'}\n//   }\n// });\n// const requestDeleteAttendanceUploadSetting = (state, action) => update(state, {\n//   deleteAttendanceUploadSetting: {\n//     isLoading: {$set: true},\n//     isError:   {$set: false},\n//     isSuccess: {$set: false},\n//     message:   {$set: ''}\n//   }\n// });\n// const successDeleteAttendanceUploadSetting = (state, action) => update(state, {\n//   deleteAttendanceUploadSetting: {\n//     isLoading: {$set: false},\n//     isError:   {$set: false},\n//     isSuccess: {$set: true},\n//     message:   {$set: ''}\n//   }\n// });\n// const errorDeleteAttendanceUploadSetting = (state, action) => update(state, {\n//   deleteAttendanceUploadSetting: {\n//     isLoading: {$set: false},\n//     isError:   {$set: true},\n//     isSuccess: {$set: false},\n//     message:   {$set: 'Error !'}\n//   }\n// });\n\n\nvar successResetPasswordStatus = function successResetPasswordStatus(state, action) {\n  return update(state, {\n    resetPasswordStatus: {\n      isLoading: {\n        $set: false\n      },\n      isError: {\n        $set: false\n      },\n      isSuccess: {\n        $set: true\n      },\n      message: {\n        $set: \"Error !\"\n      },\n      data: {\n        $set: action.payload.data\n      }\n    }\n  });\n};\n\nvar successClearResetPasswordData = function successClearResetPasswordData(state, action) {\n  return update(state, {\n    resetPasswordStatus: {\n      isLoading: {\n        $set: false\n      },\n      isError: {\n        $set: false\n      },\n      isSuccess: {\n        $set: true\n      },\n      message: {\n        $set: \"Error !\"\n      },\n      data: {\n        $set: {}\n      }\n    }\n  });\n};\n\nexport default handleActions((_handleActions = {}, _defineProperty(_handleActions, constants.REQUEST_GET_ATTANDANCE_UPLOAD_SETTING, requestAttendanceUploadSetting), _defineProperty(_handleActions, constants.SUCCESS_GET_ATTANDANCE_UPLOAD_SETTING, successGetAttendanceUploadSetting), _defineProperty(_handleActions, constants.ERROR_GET_ATTANDANCE_UPLOAD_SETTING, errorAttendanceUploadSetting), _defineProperty(_handleActions, constants.REQUEST_ADD_ATTANDANCE_UPLOAD_SETTING, requestAttendanceUploadSetting), _defineProperty(_handleActions, constants.SUCCESS_ADD_ATTANDANCE_UPLOAD_SETTING, successAttendanceUploadSettingActions), _defineProperty(_handleActions, constants.ERROR_ADD_ATTANDANCE_UPLOAD_SETTING, errorAttendanceUploadSetting), _defineProperty(_handleActions, constants.REQUEST_DELETE_ATTANDANCE_UPLOAD_SETTING, requestAttendanceUploadSetting), _defineProperty(_handleActions, constants.SUCCESS_DELETE_ATTANDANCE_UPLOAD_SETTING, successAttendanceUploadSettingActions), _defineProperty(_handleActions, constants.ERROR_DELETE_ATTANDANCE_UPLOAD_SETTING, errorAttendanceUploadSetting), _defineProperty(_handleActions, constants.SUCCESS_RESET_PASSWORD_STATUS, successResetPasswordStatus), _defineProperty(_handleActions, constants.SUCCESS_CLEAR_RESET_PASSWORD_DATA, successClearResetPasswordData), _handleActions), initialState);","map":{"version":3,"sources":["/var/www/html/ReactReduxHR/frontend/src/redux/settings/reducers/index.js"],"names":["handleActions","update","constants","initialState","attendanceUploadSetting","data","isLoading","isError","isSuccess","message","addAttendanceUploadSetting","deleteAttendanceUploadSetting","resetPasswordStatus","requestAttendanceUploadSetting","state","action","$set","successGetAttendanceUploadSetting","payload","errorAttendanceUploadSetting","successAttendanceUploadSettingActions","successResetPasswordStatus","successClearResetPasswordData","REQUEST_GET_ATTANDANCE_UPLOAD_SETTING","SUCCESS_GET_ATTANDANCE_UPLOAD_SETTING","ERROR_GET_ATTANDANCE_UPLOAD_SETTING","REQUEST_ADD_ATTANDANCE_UPLOAD_SETTING","SUCCESS_ADD_ATTANDANCE_UPLOAD_SETTING","ERROR_ADD_ATTANDANCE_UPLOAD_SETTING","REQUEST_DELETE_ATTANDANCE_UPLOAD_SETTING","SUCCESS_DELETE_ATTANDANCE_UPLOAD_SETTING","ERROR_DELETE_ATTANDANCE_UPLOAD_SETTING","SUCCESS_RESET_PASSWORD_STATUS","SUCCESS_CLEAR_RESET_PASSWORD_DATA"],"mappings":"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","sourcesContent":["import {handleActions} from 'redux-actions';\nimport update from 'immutability-helper';\nimport * as constants from '../../../redux/constants';\nimport '../../../redux/update';\n\nlet initialState = {\n  attendanceUploadSetting: {\n    data: [],\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: \"\"\n  },\n  addAttendanceUploadSetting: {\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: \"\"\n  },\n  deleteAttendanceUploadSetting: {\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: \"\"\n  },\n  resetPasswordStatus: {\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: \"\",\n    data: {}\n  }\n};\n\nconst requestAttendanceUploadSetting = (state, action) =>\n  update(state, {\n    attendanceUploadSetting: {\n      isLoading: { $set: true },\n      isError: { $set: false },\n      isSuccess: { $set: false },\n      message: { $set: \"\" }\n    }\n  });\nconst successGetAttendanceUploadSetting = (state, action) =>\n  update(state, {\n    attendanceUploadSetting: {\n      data: { $set: action.payload },\n      isLoading: { $set: false },\n      isError: { $set: false },\n      isSuccess: { $set: true },\n      message: { $set: \"\" }\n    }\n  });\nconst errorAttendanceUploadSetting = (state, action) =>\n  update(state, {\n    attendanceUploadSetting: {\n      isLoading: { $set: false },\n      isError: { $set: true },\n      isSuccess: { $set: false },\n      message: { $set: action.payload }\n    }\n  });\n\n// const requestAddAttendanceUploadSetting = (state, action) => update(state, {\n//   addAttendanceUploadSetting: {\n//     isLoading: {$set: true},\n//     isError:   {$set: false},\n//     isSuccess: {$set: false},\n//     message:   {$set: ''}\n//   }\n// });\nconst successAttendanceUploadSettingActions = (state, action) =>\n  update(state, {\n    addAttendanceUploadSetting: {\n      isLoading: { $set: false },\n      isError: { $set: false },\n      isSuccess: { $set: true },\n      message: { $set: \"\" }\n    }\n  });\n// const errorAddAttendanceUploadSetting = (state, action) => update(state, {\n//   addAttendanceUploadSetting: {\n//     isLoading: {$set: false},\n//     isError:   {$set: true},\n//     isSuccess: {$set: false},\n//     message:   {$set: 'Error !'}\n//   }\n// });\n\n// const requestDeleteAttendanceUploadSetting = (state, action) => update(state, {\n//   deleteAttendanceUploadSetting: {\n//     isLoading: {$set: true},\n//     isError:   {$set: false},\n//     isSuccess: {$set: false},\n//     message:   {$set: ''}\n//   }\n// });\n// const successDeleteAttendanceUploadSetting = (state, action) => update(state, {\n//   deleteAttendanceUploadSetting: {\n//     isLoading: {$set: false},\n//     isError:   {$set: false},\n//     isSuccess: {$set: true},\n//     message:   {$set: ''}\n//   }\n// });\n// const errorDeleteAttendanceUploadSetting = (state, action) => update(state, {\n//   deleteAttendanceUploadSetting: {\n//     isLoading: {$set: false},\n//     isError:   {$set: true},\n//     isSuccess: {$set: false},\n//     message:   {$set: 'Error !'}\n//   }\n// });\n\nconst successResetPasswordStatus = (state, action) =>\n  update(state, {\n    resetPasswordStatus: {\n      isLoading: { $set: false },\n      isError: { $set: false },\n      isSuccess: { $set: true },\n      message: { $set: \"Error !\" },\n      data: { $set: action.payload.data }\n    }\n  });\n\n  const successClearResetPasswordData = (state, action) =>\n  update(state, {\n    resetPasswordStatus: {\n      isLoading: { $set: false },\n      isError: { $set: false },\n      isSuccess: { $set: true },\n      message: { $set: \"Error !\" },\n      data: { $set: {} }\n    }\n  });\n\nexport default handleActions(\n  {\n    [constants.REQUEST_GET_ATTANDANCE_UPLOAD_SETTING]: requestAttendanceUploadSetting,\n    [constants.SUCCESS_GET_ATTANDANCE_UPLOAD_SETTING]: successGetAttendanceUploadSetting,\n    [constants.ERROR_GET_ATTANDANCE_UPLOAD_SETTING]: errorAttendanceUploadSetting,\n\n    [constants.REQUEST_ADD_ATTANDANCE_UPLOAD_SETTING]: requestAttendanceUploadSetting,\n    [constants.SUCCESS_ADD_ATTANDANCE_UPLOAD_SETTING]: successAttendanceUploadSettingActions,\n    [constants.ERROR_ADD_ATTANDANCE_UPLOAD_SETTING]: errorAttendanceUploadSetting,\n\n    [constants.REQUEST_DELETE_ATTANDANCE_UPLOAD_SETTING]: requestAttendanceUploadSetting,\n    [constants.SUCCESS_DELETE_ATTANDANCE_UPLOAD_SETTING]: successAttendanceUploadSettingActions,\n    [constants.ERROR_DELETE_ATTANDANCE_UPLOAD_SETTING]: errorAttendanceUploadSetting,\n    [constants.SUCCESS_RESET_PASSWORD_STATUS]: successResetPasswordStatus,\n    [constants.SUCCESS_CLEAR_RESET_PASSWORD_DATA]:successClearResetPasswordData,\n  },\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}