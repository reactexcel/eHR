{"ast":null,"code":"import _ from 'lodash';\nimport * as jwt from 'jwt-simple';\nimport { CONFIG } from '../config/index';\nexport function isNotUserValid(path, loggedUser) {\n  var tokenData = getLoggedUser().data || [];\n\n  var isEmpty = _.isEmpty(_.find(tokenData.role_pages, function (o) {\n    return \"/\".concat(o.page_name) === path;\n  }));\n\n  if (!loggedUser.isLoggedIn) {\n    return {\n      status: true,\n      redirectTo: '/logout'\n    };\n  } else if (loggedUser.data.is_policy_documents_read_by_user === 0) {\n    return {\n      status: true,\n      redirectTo: '/policy_documents'\n    };\n  } else if (loggedUser.data.is_inventory_audit_pending === 1) {\n    return {\n      status: true,\n      redirectTo: '/my_inventory'\n    };\n  } else if (isEmpty) {\n    return {\n      status: true,\n      redirectTo: '/' + tokenData.role_pages && tokenData.role_pages[0].page_name\n    };\n  } else {\n    return {\n      status: false,\n      redirectTo: ''\n    };\n  }\n}\nexport function setLoggedUser(token, userid) {\n  localStorage.setItem('userToken', token);\n  localStorage.setItem('userid', userid);\n  return jwt.decode(token, CONFIG.jwt_secret_key);\n}\nexport function getLoggedUser() {\n  var token = localStorage.getItem('userToken');\n  var userId = localStorage.getItem('userid');\n\n  if (_.isUndefined(token) || _.isEmpty(token) || _.isNull(token)) {\n    return {\n      token: false,\n      userId: false,\n      data: false\n    };\n  }\n\n  return {\n    token: token,\n    userId: userId,\n    data: jwt.decode(token, CONFIG.jwt_secret_key)\n  };\n}\nexport function getToken() {\n  return localStorage.getItem('userToken');\n}\nexport function resetLoggedUser() {\n  return localStorage.clear();\n}\nexport function getLowerCase(text) {\n  return text.trim().toLowerCase();\n}\nexport function getYearArray() {\n  var date = new Date();\n  var year = date.getYear() + 1900;\n  var yearArray = [];\n\n  for (var i = 0; i < 7; i++) {\n    yearArray.push(parseInt(year) + i - 3);\n  }\n\n  return yearArray;\n}","map":{"version":3,"sources":["/var/www/html/ReactReduxHR/frontend/src/services/generic.jsx"],"names":["_","jwt","CONFIG","isNotUserValid","path","loggedUser","tokenData","getLoggedUser","data","isEmpty","find","role_pages","o","page_name","isLoggedIn","status","redirectTo","is_policy_documents_read_by_user","is_inventory_audit_pending","setLoggedUser","token","userid","localStorage","setItem","decode","jwt_secret_key","getItem","userId","isUndefined","isNull","getToken","resetLoggedUser","clear","getLowerCase","text","trim","toLowerCase","getYearArray","date","Date","year","getYear","yearArray","i","push","parseInt"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport * as jwt from 'jwt-simple';\nimport {CONFIG} from '../config/index';\n\nexport function isNotUserValid (path, loggedUser) {\n  let tokenData = getLoggedUser().data || [];\n  let isEmpty = _.isEmpty(_.find(tokenData.role_pages, (o)=>{ return `/${o.page_name}` === path}));\n  if (!loggedUser.isLoggedIn) {\n    return {status: true, redirectTo: '/logout'};\n  } else if (loggedUser.data.is_policy_documents_read_by_user === 0) {\n    return {status: true, redirectTo: '/policy_documents'};\n  } else if (loggedUser.data.is_inventory_audit_pending === 1) {\n    return {status: true, redirectTo: '/my_inventory'};\n  } else if (isEmpty) {\n    return {status: true, redirectTo: '/' + tokenData.role_pages && tokenData.role_pages[0].page_name};\n  } else {\n    return {status: false, redirectTo: ''};\n  }\n}\n\nexport function setLoggedUser (token, userid) {\n  localStorage.setItem('userToken', token);\n  localStorage.setItem('userid', userid);\n  return jwt.decode(token, CONFIG.jwt_secret_key);\n}\n\nexport function getLoggedUser () {\n  const token = localStorage.getItem('userToken');\n  const userId = localStorage.getItem('userid');\n  if (_.isUndefined(token) || _.isEmpty(token) || _.isNull(token)) {\n    return {token: false, userId: false, data: false};\n  }\n  return {token, userId, data: jwt.decode(token, CONFIG.jwt_secret_key)};\n}\n\nexport function getToken () {\n  return localStorage.getItem('userToken');\n}\n\nexport function resetLoggedUser () {\n  return localStorage.clear();\n}\n\nexport function getLowerCase (text) {\n  return text.trim().toLowerCase();\n}\n\nexport function getYearArray (){\n  let date = new Date();\n  let year = date.getYear() + 1900;\n  let yearArray=[];\n  for(let i=0; i<7 ; i++){\n    yearArray.push(parseInt(year)+i-3)\n  }\n  return yearArray;\n}\n"]},"metadata":{},"sourceType":"module"}