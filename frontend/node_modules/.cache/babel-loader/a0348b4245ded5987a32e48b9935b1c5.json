{"ast":null,"code":"import _defineProperty from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _handleActions;\n\nimport { handleActions } from 'redux-actions';\nimport update from 'immutability-helper';\nimport * as constants from '../../../redux/constants';\nvar initialState = {\n  userLogin: {\n    data: {},\n    isLoggedIn: false,\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  },\n  forgotPassword: {\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  }\n};\n\nvar userLoginRequest = function userLoginRequest(state, action) {\n  return update(state, {\n    userLogin: {\n      isLoading: {\n        $set: true\n      },\n      isError: {\n        $set: false\n      },\n      isSuccess: {\n        $set: false\n      },\n      message: {\n        $set: ''\n      }\n    }\n  });\n};\n\nvar userLoginSuccess = function userLoginSuccess(state, action) {\n  return update(state, {\n    userLogin: {\n      data: {\n        $set: action.payload\n      },\n      isLoggedIn: {\n        $set: true\n      },\n      isLoading: {\n        $set: false\n      },\n      isError: {\n        $set: false\n      },\n      isSuccess: {\n        $set: true\n      },\n      message: {\n        $set: 'Login success'\n      }\n    }\n  });\n};\n\nvar userLoginFail = function userLoginFail(state, action) {\n  return update(state, {\n    userLogin: {\n      isLoading: {\n        $set: false\n      },\n      isSuccess: {\n        $set: false\n      },\n      isError: {\n        $set: true\n      },\n      message: {\n        $set: action.payload\n      }\n    }\n  });\n};\n\nvar userLoginError = function userLoginError(state, action) {\n  return update(state, {\n    userLogin: {\n      isLoading: {\n        $set: false\n      },\n      isSuccess: {\n        $set: false\n      },\n      isError: {\n        $set: true\n      },\n      message: {\n        $set: action.payload\n      }\n    }\n  });\n};\n\nvar userLogout = function userLogout(state, action) {\n  return update(state, {\n    userLogin: {\n      $set: initialState\n    }\n  });\n};\n\nvar requestForgotPassword = function requestForgotPassword(state, action) {\n  return update(state, {\n    forgotPassword: {\n      isLoading: {\n        $set: true\n      },\n      isError: {\n        $set: false\n      },\n      isSuccess: {\n        $set: false\n      },\n      message: {\n        $set: ''\n      }\n    }\n  });\n};\n\nvar successForgotPassword = function successForgotPassword(state, action) {\n  return update(state, {\n    forgotPassword: {\n      isLoading: {\n        $set: false\n      },\n      isError: {\n        $set: false\n      },\n      isSuccess: {\n        $set: true\n      },\n      message: {\n        $set: action.payload\n      }\n    }\n  });\n};\n\nvar errorForgotPassword = function errorForgotPassword(state, action) {\n  return update(state, {\n    forgotPassword: {\n      isLoading: {\n        $set: false\n      },\n      isError: {\n        $set: true\n      },\n      isSuccess: {\n        $set: false\n      },\n      message: {\n        $set: action.payload\n      }\n    }\n  });\n};\n\nexport default handleActions((_handleActions = {}, _defineProperty(_handleActions, constants.USER_LOGIN_REQUEST, userLoginRequest), _defineProperty(_handleActions, constants.USER_LOGIN_SUCCESS, userLoginSuccess), _defineProperty(_handleActions, constants.USER_LOGIN_FAIL, userLoginFail), _defineProperty(_handleActions, constants.USER_LOGIN_ERROR, userLoginError), _defineProperty(_handleActions, constants.LOGOUT_SUCCESS, userLogout), _defineProperty(_handleActions, constants.REQUEST_FORGOT_PASSWORD, requestForgotPassword), _defineProperty(_handleActions, constants.SUCCESS_FORGOT_PASSWORD, successForgotPassword), _defineProperty(_handleActions, constants.ERROR_FORGOT_PASSWORD, errorForgotPassword), _handleActions), initialState);","map":{"version":3,"sources":["/var/www/html/ReactReduxHR/frontend/src/redux/auth/reducers/logged_user.js"],"names":["handleActions","update","constants","initialState","userLogin","data","isLoggedIn","isLoading","isError","isSuccess","message","forgotPassword","userLoginRequest","state","action","$set","userLoginSuccess","payload","userLoginFail","userLoginError","userLogout","requestForgotPassword","successForgotPassword","errorForgotPassword","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGIN_ERROR","LOGOUT_SUCCESS","REQUEST_FORGOT_PASSWORD","SUCCESS_FORGOT_PASSWORD","ERROR_FORGOT_PASSWORD"],"mappings":"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","sourcesContent":["import {handleActions} from 'redux-actions';\nimport update from 'immutability-helper';\nimport * as constants from '../../../redux/constants';\n\nlet initialState = {\n  userLogin: {\n    data:       {},\n    isLoggedIn: false,\n    isLoading:  false,\n    isError:    false,\n    isSuccess:  false,\n    message:    ''\n  },\n  forgotPassword: {\n    isLoading: false,\n    isError:   false,\n    isSuccess: false, \n    message:   ''\n  }\n};\n\nconst userLoginRequest = (state, action) => update(state, {\n  userLogin: {\n    isLoading: {$set: true},\n    isError:   {$set: false},\n    isSuccess: {$set: false},\n    message:   {$set: ''}\n  }\n});\nconst userLoginSuccess = (state, action) => update(state, {\n  userLogin: {\n    data:       {$set: action.payload},\n    isLoggedIn: {$set: true},\n    isLoading:  {$set: false},\n    isError:    {$set: false},\n    isSuccess:  {$set: true},\n    message:    {$set: 'Login success'}\n  }\n});\nconst userLoginFail = (state, action) => update(state, {\n  userLogin: {\n    isLoading: {$set: false},\n    isSuccess: {$set: false},\n    isError:   {$set: true},\n    message:   {$set: action.payload}\n  }\n});\nconst userLoginError = (state, action) => update(state, {\n  userLogin: {\n    isLoading: {$set: false},\n    isSuccess: {$set: false},\n    isError:   {$set: true},\n    message:   {$set: action.payload}\n  }\n});\nconst userLogout = (state, action) => update(state, {\n  userLogin: {$set: initialState}\n});\nconst requestForgotPassword = (state, action) => update(state, {\n  forgotPassword: {\n    isLoading: {$set: true},\n    isError:   {$set: false},\n    isSuccess: {$set: false},\n    message:   {$set: ''}\n  }\n});\nconst successForgotPassword = (state, action) => update(state, {\n  forgotPassword: {\n    isLoading: {$set: false},\n    isError:   {$set: false},\n    isSuccess: {$set: true},\n    message:   {$set: action.payload}\n  }\n});\nconst errorForgotPassword = (state, action) => update(state, {\n  forgotPassword: {\n    isLoading: {$set: false},\n    isError:   {$set: true},\n    isSuccess: {$set: false},\n    message:   {$set: action.payload}\n  }\n});\nexport default handleActions({\n  [constants.USER_LOGIN_REQUEST]: userLoginRequest,\n  [constants.USER_LOGIN_SUCCESS]: userLoginSuccess,\n  [constants.USER_LOGIN_FAIL]:    userLoginFail,\n  [constants.USER_LOGIN_ERROR]:   userLoginError,\n  [constants.LOGOUT_SUCCESS]:     userLogout,\n\n  [constants.REQUEST_FORGOT_PASSWORD]: requestForgotPassword,\n  [constants.SUCCESS_FORGOT_PASSWORD]: successForgotPassword,\n  [constants.ERROR_FORGOT_PASSWORD]:   errorForgotPassword\n\n}, initialState);\n"]},"metadata":{},"sourceType":"module"}