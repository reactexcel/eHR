{"ast":null,"code":"import _defineProperty from \"/var/www/html/ReactReduxHR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _handleActions;\n\nimport { handleActions } from 'redux-actions';\nimport update from 'immutability-helper';\nimport * as constants from '../../../redux/constants';\nimport '../../../redux/update';\nvar initialState = {\n  healthStats: {\n    data: {},\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  },\n  healthStatsSecretKeyList: {\n    data: {},\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  },\n  healthStatsAddSecretKey: {\n    data: {},\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  },\n  healthStatsDeleteSecretKey: {\n    data: {},\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  },\n  healthStatsRegenerateSecretKey: {\n    data: {},\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  },\n  deleteHealthStats: {\n    data: {},\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  },\n  statsHistory: {\n    data: {},\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  },\n  statsLeaveHistory: {\n    data: {},\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: '',\n    flag: false\n  }\n};\n\nvar requestHealthStats = function requestHealthStats(state, action) {\n  return update(state, {\n    deleteHealthStats: {\n      isError: {\n        $set: false\n      },\n      isSuccess: {\n        $set: false\n      }\n    },\n    healthStats: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successHealthStats = function successHealthStats(state, action) {\n  return update(state, {\n    healthStats: {\n      $setRequestSuccess: action.payload\n    }\n  });\n};\n\nvar errorHealthStats = function errorHealthStats(state, action) {\n  return update(state, {\n    healthStats: {\n      $setRequestError: action.payload\n    }\n  });\n};\n\nvar requestHealthStatsSecretKeyList = function requestHealthStatsSecretKeyList(state, action) {\n  return update(state, {\n    healthStatsAddSecretKey: {\n      isError: {\n        $set: false\n      },\n      isSuccess: {\n        $set: false\n      }\n    },\n    healthStatsDeleteSecretKey: {\n      isError: {\n        $set: false\n      },\n      isSuccess: {\n        $set: false\n      }\n    },\n    healthStatsRegenerateSecretKey: {\n      isError: {\n        $set: false\n      },\n      isSuccess: {\n        $set: false\n      }\n    },\n    healthStatsSecretKeyList: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successHealthStatsSecretKeyList = function successHealthStatsSecretKeyList(state, action) {\n  return update(state, {\n    healthStatsSecretKeyList: {\n      $setRequestSuccess: action.payload\n    }\n  });\n};\n\nvar errorHealthStatsSecretKeyList = function errorHealthStatsSecretKeyList(state, action) {\n  return update(state, {\n    healthStatsSecretKeyList: {\n      $setRequestError: action.payload\n    }\n  });\n};\n\nvar requestHealthStatsAddSecretKey = function requestHealthStatsAddSecretKey(state, action) {\n  return update(state, {\n    healthStatsAddSecretKey: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successHealthStatsAddSecretKey = function successHealthStatsAddSecretKey(state, action) {\n  return update(state, {\n    healthStatsAddSecretKey: {\n      $setSuccessMessage: action.payload\n    }\n  });\n};\n\nvar errorHealthStatsAddSecretKey = function errorHealthStatsAddSecretKey(state, action) {\n  return update(state, {\n    healthStatsAddSecretKey: {\n      $setRequestError: action.payload\n    }\n  });\n};\n\nvar requestHealthStatsDeleteSecretKey = function requestHealthStatsDeleteSecretKey(state, action) {\n  return update(state, {\n    healthStatsDeleteSecretKey: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successHealthStatsDeleteSecretKey = function successHealthStatsDeleteSecretKey(state, action) {\n  return update(state, {\n    healthStatsDeleteSecretKey: {\n      $setSuccessMessage: action.payload\n    }\n  });\n};\n\nvar errorHealthStatsDeleteSecretKey = function errorHealthStatsDeleteSecretKey(state, action) {\n  return update(state, {\n    healthStatsDeleteSecretKey: {\n      $setRequestError: action.payload\n    }\n  });\n};\n\nvar requestHealthStatsRegenerateSecretKey = function requestHealthStatsRegenerateSecretKey(state, action) {\n  return update(state, {\n    healthStatsRegenerateSecretKey: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successHealthStatsRegenerateSecretKey = function successHealthStatsRegenerateSecretKey(state, action) {\n  return update(state, {\n    healthStatsRegenerateSecretKey: {\n      $setSuccessMessage: action.payload\n    }\n  });\n};\n\nvar errorHealthStatsRegenerateSecretKey = function errorHealthStatsRegenerateSecretKey(state, action) {\n  return update(state, {\n    healthStatsRegenerateSecretKey: {\n      $setRequestError: action.payload\n    }\n  });\n};\n\nvar deleteHealthStats = function deleteHealthStats(state, action) {\n  return update(state, {\n    deleteHealthStats: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successDeleteHealthStats = function successDeleteHealthStats(state, action) {\n  return update(state, {\n    deleteHealthStats: {\n      $setSuccessMessage: action.payload\n    }\n  });\n};\n\nvar errorDeleteHealthStats = function errorDeleteHealthStats(state, action) {\n  return update(state, {\n    deleteHealthStats: {\n      $setRequestError: action.payload\n    }\n  });\n};\n\nvar requestStatsHistory = function requestStatsHistory(state, action) {\n  return update(state, {\n    statsHistory: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successStatsHistory = function successStatsHistory(state, action) {\n  return update(state, {\n    statsHistory: {\n      $setRequestSuccess: action.payload\n    }\n  });\n};\n\nvar errorStatsHistory = function errorStatsHistory(state, action) {\n  return update(state, {\n    statsHistory: {\n      $setRequestError: action.payload\n    }\n  });\n};\n\nvar requestStatsLeaveHistory = function requestStatsLeaveHistory(state, action) {\n  return update(state, {\n    statsLeaveHistory: {\n      $setRequestLoading: null\n    }\n  });\n};\n\nvar successStatsLeaveHistory = function successStatsLeaveHistory(state, action) {\n  return update(state, {\n    statsLeaveHistory: {\n      $setRequestSuccess: action.payload,\n      flag: {\n        $set: true\n      }\n    }\n  });\n};\n\nvar errorStatsLeaveHistory = function errorStatsLeaveHistory(state, action) {\n  return update(state, {\n    statsLeaveHistory: {\n      $setRequestError: action.payload\n    }\n  });\n};\n\nvar updateStatsLeaveHistoryFlag = function updateStatsLeaveHistoryFlag(state, action) {\n  return update(state, {\n    statsLeaveHistory: {\n      flag: {\n        $set: false\n      }\n    }\n  });\n};\n\nexport default handleActions((_handleActions = {}, _defineProperty(_handleActions, constants.REQUEST_HEALTH_STATS, requestHealthStats), _defineProperty(_handleActions, constants.SUCCESS_HEALTH_STATS, successHealthStats), _defineProperty(_handleActions, constants.ERROR_HEALTH_STATS, errorHealthStats), _defineProperty(_handleActions, constants.REQUEST_HEALTH_STATS_SECRET_KEY_LIST, requestHealthStatsSecretKeyList), _defineProperty(_handleActions, constants.SUCCESS_HEALTH_STATS_SECRET_KEY_LIST, successHealthStatsSecretKeyList), _defineProperty(_handleActions, constants.ERROR_HEALTH_STATS_SECRET_KEY_LIST, errorHealthStatsSecretKeyList), _defineProperty(_handleActions, constants.REQUEST_HEALTH_STATS_ADD_SECRET_KEY, requestHealthStatsAddSecretKey), _defineProperty(_handleActions, constants.SUCCESS_HEALTH_STATS_ADD_SECRET_KEY, successHealthStatsAddSecretKey), _defineProperty(_handleActions, constants.ERROR_HEALTH_STATS_ADD_SECRET_KEY, errorHealthStatsAddSecretKey), _defineProperty(_handleActions, constants.REQUEST_HEALTH_STATS_DELETE_SECRET_KEY, requestHealthStatsDeleteSecretKey), _defineProperty(_handleActions, constants.SUCCESS_HEALTH_STATS_DELETE_SECRET_KEY, successHealthStatsDeleteSecretKey), _defineProperty(_handleActions, constants.ERROR_HEALTH_STATS_DELETE_SECRET_KEY, errorHealthStatsDeleteSecretKey), _defineProperty(_handleActions, constants.REQUEST_HEALTH_STATS_REGENERATE_SECRET_KEY, requestHealthStatsRegenerateSecretKey), _defineProperty(_handleActions, constants.SUCCESS_HEALTH_STATS_REGENERATE_SECRET_KEY, successHealthStatsRegenerateSecretKey), _defineProperty(_handleActions, constants.ERROR_HEALTH_STATS_REGENERATE_SECRET_KEY, errorHealthStatsRegenerateSecretKey), _defineProperty(_handleActions, constants.DELETE_HEALTH_STATS, deleteHealthStats), _defineProperty(_handleActions, constants.SUCCESS_DELETE_HEALTH_STATS, successDeleteHealthStats), _defineProperty(_handleActions, constants.ERROR_DELETE_HEALTH_STATS, errorDeleteHealthStats), _defineProperty(_handleActions, constants.REQUEST_STATS_HISTORY, requestStatsHistory), _defineProperty(_handleActions, constants.SUCCESS_STATS_HISTORY, successStatsHistory), _defineProperty(_handleActions, constants.ERROR_STATS_HISTORY, errorStatsHistory), _defineProperty(_handleActions, constants.REQUEST_STATS_LEAVE_HISTORY, requestStatsLeaveHistory), _defineProperty(_handleActions, constants.SUCCESS_STATS_LEAVE_HISTORY, successStatsLeaveHistory), _defineProperty(_handleActions, constants.ERROR_STATS_LEAVE_HISTORY, errorStatsLeaveHistory), _defineProperty(_handleActions, constants.UPDATE_FLAG, updateStatsLeaveHistoryFlag), _handleActions), initialState);","map":{"version":3,"sources":["/var/www/html/ReactReduxHR/frontend/src/redux/healthStats/reducers/healthStats.jsx"],"names":["handleActions","update","constants","initialState","healthStats","data","isLoading","isError","isSuccess","message","healthStatsSecretKeyList","healthStatsAddSecretKey","healthStatsDeleteSecretKey","healthStatsRegenerateSecretKey","deleteHealthStats","statsHistory","statsLeaveHistory","flag","requestHealthStats","state","action","$set","$setRequestLoading","successHealthStats","$setRequestSuccess","payload","errorHealthStats","$setRequestError","requestHealthStatsSecretKeyList","successHealthStatsSecretKeyList","errorHealthStatsSecretKeyList","requestHealthStatsAddSecretKey","successHealthStatsAddSecretKey","$setSuccessMessage","errorHealthStatsAddSecretKey","requestHealthStatsDeleteSecretKey","successHealthStatsDeleteSecretKey","errorHealthStatsDeleteSecretKey","requestHealthStatsRegenerateSecretKey","successHealthStatsRegenerateSecretKey","errorHealthStatsRegenerateSecretKey","successDeleteHealthStats","errorDeleteHealthStats","requestStatsHistory","successStatsHistory","errorStatsHistory","requestStatsLeaveHistory","successStatsLeaveHistory","errorStatsLeaveHistory","updateStatsLeaveHistoryFlag","REQUEST_HEALTH_STATS","SUCCESS_HEALTH_STATS","ERROR_HEALTH_STATS","REQUEST_HEALTH_STATS_SECRET_KEY_LIST","SUCCESS_HEALTH_STATS_SECRET_KEY_LIST","ERROR_HEALTH_STATS_SECRET_KEY_LIST","REQUEST_HEALTH_STATS_ADD_SECRET_KEY","SUCCESS_HEALTH_STATS_ADD_SECRET_KEY","ERROR_HEALTH_STATS_ADD_SECRET_KEY","REQUEST_HEALTH_STATS_DELETE_SECRET_KEY","SUCCESS_HEALTH_STATS_DELETE_SECRET_KEY","ERROR_HEALTH_STATS_DELETE_SECRET_KEY","REQUEST_HEALTH_STATS_REGENERATE_SECRET_KEY","SUCCESS_HEALTH_STATS_REGENERATE_SECRET_KEY","ERROR_HEALTH_STATS_REGENERATE_SECRET_KEY","DELETE_HEALTH_STATS","SUCCESS_DELETE_HEALTH_STATS","ERROR_DELETE_HEALTH_STATS","REQUEST_STATS_HISTORY","SUCCESS_STATS_HISTORY","ERROR_STATS_HISTORY","REQUEST_STATS_LEAVE_HISTORY","SUCCESS_STATS_LEAVE_HISTORY","ERROR_STATS_LEAVE_HISTORY","UPDATE_FLAG"],"mappings":"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","sourcesContent":["import {handleActions} from 'redux-actions';\nimport update from 'immutability-helper';\nimport * as constants from '../../../redux/constants';\nimport '../../../redux/update';\n\nlet initialState = {\n  healthStats: {\n    data:      {},\n    isLoading: false,\n    isError:   false,\n    isSuccess: false,\n    message:   ''\n  },\n  healthStatsSecretKeyList: {\n    data:      {},\n    isLoading: false,\n    isError:   false,\n    isSuccess: false,\n    message:   ''\n  },\n  healthStatsAddSecretKey: {\n    data:      {},\n    isLoading: false,\n    isError:   false,\n    isSuccess: false,\n    message:   ''\n  },\n  healthStatsDeleteSecretKey: {\n    data:      {},\n    isLoading: false,\n    isError:   false,\n    isSuccess: false,\n    message:   ''\n  },\n  healthStatsRegenerateSecretKey: {\n    data:      {},\n    isLoading: false,\n    isError:   false,\n    isSuccess: false,\n    message:   ''\n  },\n  deleteHealthStats: {\n    data:      {},\n    isLoading: false,\n    isError:   false,\n    isSuccess: false,\n    message:   ''\n  },\n  statsHistory:{\n    data:      {},\n    isLoading: false,\n    isError:   false,\n    isSuccess: false,\n    message:   ''\n  },\n  statsLeaveHistory:{\n    data:      {},\n    isLoading: false,\n    isError:   false,\n    isSuccess: false,\n    message:   '',\n    flag: false\n  }\n};\n\nconst requestHealthStats = (state, action) => update(state, {\n    deleteHealthStats: {isError:{$set: false},isSuccess:{$set: false}},\n    healthStats: {$setRequestLoading: null}\n});\nconst successHealthStats = (state, action) => update(state, {\n    healthStats: {$setRequestSuccess: action.payload}\n});\nconst errorHealthStats = (state, action) => update(state, {\n    healthStats: {$setRequestError: action.payload}\n});\n\nconst requestHealthStatsSecretKeyList = (state, action) => update(state, {\n  healthStatsAddSecretKey: {isError:{$set: false},isSuccess:{$set: false}},\n  healthStatsDeleteSecretKey: {isError:{$set: false},isSuccess:{$set: false}},\n  healthStatsRegenerateSecretKey: {isError:{$set: false},isSuccess:{$set: false}},\n  healthStatsSecretKeyList: {$setRequestLoading: null}\n});\nconst successHealthStatsSecretKeyList = (state, action) => update(state, {\n  healthStatsSecretKeyList: {$setRequestSuccess: action.payload}\n});\nconst errorHealthStatsSecretKeyList = (state, action) => update(state, {\n  healthStatsSecretKeyList: {$setRequestError: action.payload}\n});\n\nconst requestHealthStatsAddSecretKey = (state, action) => update(state, {\n    healthStatsAddSecretKey: {$setRequestLoading: null}\n});\nconst successHealthStatsAddSecretKey = (state, action) => update(state, {\n  healthStatsAddSecretKey: {$setSuccessMessage: action.payload}\n});\nconst errorHealthStatsAddSecretKey = (state, action) => update(state, {\n  healthStatsAddSecretKey: {$setRequestError: action.payload}\n});\n\nconst requestHealthStatsDeleteSecretKey = (state, action) => update(state, {\n  healthStatsDeleteSecretKey: {$setRequestLoading: null}\n});\nconst successHealthStatsDeleteSecretKey = (state, action) => update(state, {\n  healthStatsDeleteSecretKey: {$setSuccessMessage: action.payload}\n});\nconst errorHealthStatsDeleteSecretKey = (state, action) => update(state, {\n  healthStatsDeleteSecretKey: {$setRequestError: action.payload}\n});\n\nconst requestHealthStatsRegenerateSecretKey = (state, action) => update(state, {\n  healthStatsRegenerateSecretKey: {$setRequestLoading: null}\n});\nconst successHealthStatsRegenerateSecretKey = (state, action) => update(state, {\n  healthStatsRegenerateSecretKey: {$setSuccessMessage: action.payload}\n});\nconst errorHealthStatsRegenerateSecretKey = (state, action) => update(state, {\n  healthStatsRegenerateSecretKey: {$setRequestError: action.payload}\n});\n\nconst deleteHealthStats = (state, action) => update(state, {\n  deleteHealthStats: {$setRequestLoading: null}\n});\nconst successDeleteHealthStats = (state, action) => update(state, {\n  deleteHealthStats: {$setSuccessMessage: action.payload}\n});\nconst errorDeleteHealthStats = (state, action) => update(state, {\n  deleteHealthStats: {$setRequestError: action.payload}\n});\n\nconst requestStatsHistory = (state, action) => update(state, {\n  statsHistory: {$setRequestLoading: null}\n});\nconst successStatsHistory = (state, action) => update(state, {\n  statsHistory: {$setRequestSuccess: action.payload}\n});\nconst errorStatsHistory = (state, action) => update(state, {\n  statsHistory: {$setRequestError: action.payload}\n});\n\nconst requestStatsLeaveHistory = (state, action) => update(state, {\n  statsLeaveHistory: {$setRequestLoading: null}\n});\nconst successStatsLeaveHistory = (state, action) => update(state, {\n  statsLeaveHistory: {$setRequestSuccess: action.payload , flag: {$set: true}}\n});\nconst errorStatsLeaveHistory = (state, action) => update(state, {\n  statsLeaveHistory: {$setRequestError: action.payload}\n});\nconst updateStatsLeaveHistoryFlag = (state, action) => update(state,{\n  statsLeaveHistory: {flag: {$set: false}}\n})\n\nexport default handleActions({\n  [constants.REQUEST_HEALTH_STATS]: requestHealthStats,\n  [constants.SUCCESS_HEALTH_STATS]: successHealthStats,\n  [constants.ERROR_HEALTH_STATS]:   errorHealthStats,\n  [constants.REQUEST_HEALTH_STATS_SECRET_KEY_LIST]: requestHealthStatsSecretKeyList,\n  [constants.SUCCESS_HEALTH_STATS_SECRET_KEY_LIST]: successHealthStatsSecretKeyList,\n  [constants.ERROR_HEALTH_STATS_SECRET_KEY_LIST]: errorHealthStatsSecretKeyList,\n  [constants.REQUEST_HEALTH_STATS_ADD_SECRET_KEY]: requestHealthStatsAddSecretKey,\n  [constants.SUCCESS_HEALTH_STATS_ADD_SECRET_KEY]: successHealthStatsAddSecretKey,\n  [constants.ERROR_HEALTH_STATS_ADD_SECRET_KEY]: errorHealthStatsAddSecretKey,\n  [constants.REQUEST_HEALTH_STATS_DELETE_SECRET_KEY]: requestHealthStatsDeleteSecretKey,\n  [constants.SUCCESS_HEALTH_STATS_DELETE_SECRET_KEY]: successHealthStatsDeleteSecretKey,\n  [constants.ERROR_HEALTH_STATS_DELETE_SECRET_KEY]: errorHealthStatsDeleteSecretKey,\n  [constants.REQUEST_HEALTH_STATS_REGENERATE_SECRET_KEY]: requestHealthStatsRegenerateSecretKey,\n  [constants.SUCCESS_HEALTH_STATS_REGENERATE_SECRET_KEY]: successHealthStatsRegenerateSecretKey,\n  [constants.ERROR_HEALTH_STATS_REGENERATE_SECRET_KEY]: errorHealthStatsRegenerateSecretKey,\n  [constants.DELETE_HEALTH_STATS]: deleteHealthStats,\n  [constants.SUCCESS_DELETE_HEALTH_STATS]: successDeleteHealthStats,\n  [constants.ERROR_DELETE_HEALTH_STATS]:   errorDeleteHealthStats,\n  [constants.REQUEST_STATS_HISTORY]: requestStatsHistory,\n  [constants.SUCCESS_STATS_HISTORY]: successStatsHistory,\n  [constants.ERROR_STATS_HISTORY]: errorStatsHistory,\n  [constants.REQUEST_STATS_LEAVE_HISTORY]: requestStatsLeaveHistory,\n  [constants.SUCCESS_STATS_LEAVE_HISTORY]: successStatsLeaveHistory,\n  [constants.ERROR_STATS_LEAVE_HISTORY]: errorStatsLeaveHistory,\n  [constants.UPDATE_FLAG]: updateStatsLeaveHistoryFlag   \n}, initialState);\n"]},"metadata":{},"sourceType":"module"}